police_effect:
  alias: Police Effect
  sequence:
    - repeat:
        count: "10"
        sequence:
          - service: scene.turn_on
            target:
              entity_id:
                - scene.landing_set_light_to_blue
                - scene.landing_set_light_to_red
    - service: scene.turn_on
      target:
        entity_id: scene.stairs_light_dim
    - service: scene.turn_on
      target:
        entity_id: scene.stairs_light_off
  mode: single
post_rich_notification:
  alias: Post Rich Notification
  sequence:
    - service: notify.danny_tsang
      data:
        message: test
        title: test title
        target: "#home_log"
        data:
          attachments:
            - color: "#36a64f"
              pretext: Optional text that appears above the attachment block
              title: Slack API Documentation
              title_link: https://api.slack.com/
              text: Optional text that appears within the attachment
              fields:
                - title: Priority
                  value: High
                  short: false
  mode: single
  icon: mdi:slack
lounge_flash_lounge_lights_red:
  alias: "Lounge: Flash Lounge Lights Red"
  sequence:
    - service: scene.create
      data:
        scene_id: current_lounge_lights
        snapshot_entities:
          - light.lounge_left_lamp
          - light.lounge_right_lamp
    - service: scene.turn_on
      target:
        entity_id: scene.lounge_lights_red
      data:
        transition: 0
    - delay:
        hours: 0
        minutes: 0
        seconds: 0
        milliseconds: 500
    - service: scene.turn_on
      target:
        entity_id: scene.current_lounge_lights
  mode: single
  icon: mdi:lamp
turn_everything_off:
  alias: Turn Everything Off
  sequence:
    - data:
        message: ":mirror: Turning off Magic Mirror."
      service: script.send_to_home_log
    - service: switch.turn_off
      target:
        entity_id: switch.magic_mirror_screen
    - service: script.send_to_home_log
      data:
        message: ":bulb: Turning off office lights."
    - service: scene.turn_on
      target:
        entity_id: scene.office_all_lights_off
    - service: script.send_to_home_log
      data:
        message: ":bulb: Turning off office, bedroom fans."
    - service: switch.turn_off
      target:
        entity_id:
          - switch.office_fan
          - switch.fan_3
    - service: script.send_to_home_log
      data:
        message: ":bulb: Turning off kitchen lights."
    - service: scene.turn_on
      target:
        entity_id:
          - scene.kitchen_all_lights_off
    - service: script.send_to_home_log
      data:
        message: ":bulb: Turning off lounge lights."
    - service: scene.turn_on
      target:
        entity_id: scene.lounge_lights_off
    - service: script.send_to_home_log
      data:
        message: ":running: :house: :bulb: Turning off conservatory light."
    - service: scene.turn_on
      target:
        entity_id: scene.conservatory_turn_off_light
    - service: script.send_to_home_log
      data:
        message: ":bulb: Turning off stairs light."
    - service: scene.turn_on
      target:
        entity_id:
          - scene.stairs_light_off
          - scene.stairs_light_2_off
    - service: script.send_to_home_log
      data:
        message: ":bulb: Turning off porch light."
    - service: scene.turn_on
      target:
        entity_id: scene.porch_lights_off
    - service: script.send_to_home_log
      data:
        message: ":bulb: Turning off bathroom light."
    - service: scene.turn_on
      target:
        entity_id: scene.bathroom_turn_off_light
    - if:
        - condition: state
          entity_id: binary_sensor.bedroom_tv_powered_on
          state: "on"
      then:
        - parallel:
            - service: script.send_to_home_log
              data:
                message: "Turning :bed: Bedroom :tv: TV off."
            - service: remote.send_command
              data:
                device: Bedroom TV
                command: power
              target:
                entity_id: remote.bedroom_remote
  mode: single
nfc_bedroom_right:
  alias: NFC Bedroom Right
  sequence:
    - service: script.send_to_home_log
      data:
        message: Turning everything off.
    - service: script.turn_everything_off
  mode: single
  icon: mdi:nfc
# https://community.home-assistant.io/t/random-light-schedule/10135/56
downstairs_random_light:
  alias: Downstairs Random Light
  sequence:
    - service: homeassistant.toggle
      data:
        entity_id:
          "{% set group_id = 'light.downstairs_random_lights' %}  {% set max_on
          = 3 %}     {% set lights_on_count = expand(group_id) | selectattr('state',
          'eq', 'on')| list | length %} {% if lights_on_count > max_on %}\n  {% set
          lights_on_entities = expand(group_id) | selectattr('state', 'eq', 'on')| map(attribute='entity_id')
          | list %}\n  {{ lights_on_entities | random }}\n{% else %}\n  {% set group_lights_entities
          =  expand(group_id) | map(attribute='entity_id') | list %}\n  {{ group_lights_entities
          | random }}\n{% endif %}"
  mode: single
  icon: mdi:lightbulb-group
upstairs_random_lights:
  alias: Upstairs Random Lights
  sequence:
    - service: homeassistant.toggle
      data:
        entity_id:
          "{% set group_id = 'light.upstairs_random_lights' %}  {% set max_on
          = 1 %}     {% set lights_on_count = expand(group_id) | selectattr('state',
          'eq', 'on')| list | length %} {% if lights_on_count > max_on %}\n  {% set
          lights_on_entities = expand(group_id) | selectattr('state', 'eq', 'on')| map(attribute='entity_id')
          | list %}\n  {{ lights_on_entities | random }}\n{% else %}\n  {% set group_lights_entities
          =  expand(group_id) | map(attribute='entity_id') | list %}\n  {{ group_lights_entities
          | random }}\n{% endif %}"
  mode: single
  icon: mdi:lightbulb-group
update_travel_time_by_car:
  alias: Update Travel Time By Car
  sequence:
    - parallel:
        - service: homeassistant.update_entity
          data: {}
          target:
            entity_id: sensor.google_travel_time_by_car
        - service: script.send_to_home_log
          data:
            message:
              "Updating.\nOrigin: {{ states('sensor.origin_address') }} \nDestination:
              {{ states('sensor.destination_address') }}"
            title: ":world_map: Travel Time By Car"
  mode: single
  icon: mdi:car
energy_notify_excess_solar:
  alias: Energy Notify Excess Solar
  variables:
    people_home: "{% set people = namespace(home=[]) %}
      {% for p in state_attr('group.adult_people', 'entity_id')|default([]) %}
      {% if states(p) == 'home' %}
      {% set people.home = people.home + [p] %}
      {% endif %}
      {% endfor %}
      {{ people.home }}"
  sequence:
    - service: script.send_direct_notification
      data:
        message: >-
          :battery: Battery charged 
          ({{ states('sensor.growatt_sph6000_statement_of_charge')~
          state_attr('sensor.growatt_sph6000_statement_of_charge', 'unit_of_measurement') }})
          and estimated to produce
          {{ states('sensor.total_solar_forecast_estimated_energy_production_next_hour')~
          state_attr('sensor.total_solar_forecast_estimated_energy_production_next_hour', 'unit_of_measurement') }} 
          in the next hour.


          There's approximately
          {{ (states('sensor.power_production_next_24hours')|float(0)/1000) }} kW
          to be produced to the end of the day ({{ as_timestamp(state_attr('sun.sun','next_setting')) | timestamp_custom('%H:%M') }}).
        title: ":sunny: :zap: :electric_plug: Solar"
        people: "{{ people_home }}"
  mode: single
  icon: mdi:solar-power
