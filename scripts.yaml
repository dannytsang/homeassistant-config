lounge_flash_lounge_lights_red:
  alias: "Lounge: Flash Lounge Lights Red"
  sequence:
    - service: scene.create
      data:
        scene_id: current_lounge_lights
        snapshot_entities:
          - light.living_room_lamp_left
          - light.living_room_lamp_right
    - service: scene.turn_on
      target:
        entity_id: scene.living_room_lights_red
      data:
        transition: 0
    - delay:
        hours: 0
        minutes: 0
        seconds: 0
        milliseconds: 500
    - service: scene.turn_on
      target:
        entity_id: scene.current_lounge_lights
  mode: single
  icon: mdi:lamp
nfc_bedroom_right:
  alias: NFC Bedroom Right
  sequence:
    - service: script.send_to_home_log
      data:
        message: Turning everything off.
    - service: script.turn_everything_off
  mode: single
  icon: mdi:nfc
downstairs_random_light:
  alias: Downstairs Random Light
  sequence:
    - service: homeassistant.toggle
      data:
        entity_id:
          "{% set group_id = 'light.downstairs_random_lights' %}  {% set max_on
          = 3 %}     {% set lights_on_count = expand(group_id) | selectattr('state',
          'eq', 'on')| list | length %} {% if lights_on_count > max_on %}\n  {% set
          lights_on_entities = expand(group_id) | selectattr('state', 'eq', 'on')| map(attribute='entity_id')
          | list %}\n  {{ lights_on_entities | random }}\n{% else %}\n  {% set group_lights_entities
          =  expand(group_id) | map(attribute='entity_id') | list %}\n  {{ group_lights_entities
          | random }}\n{% endif %}"
  mode: single
  icon: mdi:lightbulb-group
upstairs_random_lights:
  alias: Upstairs Random Lights
  sequence:
    - service: homeassistant.toggle
      data:
        entity_id:
          "{% set group_id = 'light.upstairs_random_lights' %}  {% set max_on
          = 1 %}     {% set lights_on_count = expand(group_id) | selectattr('state',
          'eq', 'on')| list | length %} {% if lights_on_count > max_on %}\n  {% set
          lights_on_entities = expand(group_id) | selectattr('state', 'eq', 'on')| map(attribute='entity_id')
          | list %}\n  {{ lights_on_entities | random }}\n{% else %}\n  {% set group_lights_entities
          =  expand(group_id) | map(attribute='entity_id') | list %}\n  {{ group_lights_entities
          | random }}\n{% endif %}"
  mode: single
  icon: mdi:lightbulb-group
update_travel_time_by_car:
  alias: Update Travel Time By Car
  sequence:
    - parallel:
        - service: homeassistant.update_entity
          data: {}
          target:
            entity_id: sensor.google_travel_time_by_car
        - service: script.send_to_home_log
          data:
            message:
              "Updating.\nOrigin: {{ states('sensor.origin_address') }} \nDestination:
              {{ states('sensor.destination_address') }}"
            title: ":world_map: Travel Time By Car"
  mode: single
  icon: mdi:car
car_set_next_update_location:
  alias: Car Set Next Update Location
  sequence:
    - choose:
        - conditions:
            - condition: state
              entity_id: device_tracker.dannys_car
              state: "unavailable"
          sequence:
            - service: timer.start
              data:
                duration:
                  "{% set new_ts = (states('input_number.default_update_car_location')|int(0)
                  * 60) %} {{ '{:02d}:{:02d}:{:02d}'.format(new_ts // 3600, (new_ts %
                  3600) // 60, (new_ts % 3600) % 60) }}"
              target:
                entity_id: timer.update_dannys_car
        - conditions:
            - or:
                - condition: numeric_state
                  entity_id: sensor.danny_home_nearest_distance
                  below: "10"
                - condition: state
                  entity_id: person.danny
                  state: "home"
            - condition: numeric_state
              entity_id: sensor.dannys_car_home_distance
              below: "10"
          sequence:
            - service: timer.start
              data:
                duration:
                  "{% set new_ts = ((states('input_number.default_update_car_location')|int(0)
                  * 60) * 6) %} {{ '{:02d}:{:02d}:{:02d}'.format(new_ts // 3600, (new_ts
                  % 3600) // 60, (new_ts % 3600) % 60) }}"
              target:
                entity_id: timer.update_dannys_car
      default: []
  mode: single
  icon: mdi:car
