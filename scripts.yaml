police_effect:
  alias: Police Effect
  sequence:
    - repeat:
        count: "10"
        sequence:
          - service: scene.turn_on
            target:
              entity_id:
                - scene.landing_set_light_to_blue
                - scene.landing_set_light_to_red
    - service: scene.turn_on
      target:
        entity_id: scene.stairs_light_dim
    - service: scene.turn_on
      target:
        entity_id: scene.stairs_light_off
  mode: single
post_rich_notification:
  alias: Post Rich Notification
  sequence:
    - service: notify.danny_tsang
      data:
        message: test
        title: test title
        target: "#home_log"
        data:
          attachments:
            - color: "#36a64f"
              pretext: Optional text that appears above the attachment block
              title: Slack API Documentation
              title_link: https://api.slack.com/
              text: Optional text that appears within the attachment
              fields:
                - title: Priority
                  value: High
                  short: false
  mode: single
  icon: mdi:slack
lounge_flash_lounge_lights_red:
  alias: "Lounge: Flash Lounge Lights Red"
  sequence:
    - service: scene.create
      data:
        scene_id: current_lounge_lights
        snapshot_entities:
          - light.lounge_left_lamp
          - light.lounge_right_lamp
    - service: scene.turn_on
      target:
        entity_id: scene.lounge_lights_red
      data:
        transition: 0
    - delay:
        hours: 0
        minutes: 0
        seconds: 0
        milliseconds: 500
    - service: scene.turn_on
      target:
        entity_id: scene.current_lounge_lights
  mode: single
  icon: mdi:lamp
turn_everything_off:
  alias: Turn Everything Off
  sequence:
    - data:
        message: ":mirror: Turning off Magic Mirror."
      service: script.send_to_home_log
    - service: switch.turn_off
      target:
        entity_id: switch.magic_mirror_screen
    - service: script.send_to_home_log
      data:
        message: ":bulb: Turning off office lights."
    - service: scene.turn_on
      target:
        entity_id: scene.office_all_lights_off
    - service: script.send_to_home_log
      data:
        message: ":bulb: Turning off office, bedroom fans."
    - service: switch.turn_off
      target:
        entity_id:
          - switch.office_fan
          - switch.fan_3
    - service: script.send_to_home_log
      data:
        message: ":bulb: Turning off kitchen lights."
    - service: scene.turn_on
      target:
        entity_id:
          - scene.kitchen_all_lights_off
    - service: script.send_to_home_log
      data:
        message: ":bulb: Turning off lounge lights."
    - service: scene.turn_on
      target:
        entity_id: scene.lounge_lights_off
    - service: script.send_to_home_log
      data:
        message: ":running: :house: :bulb: Turning off conservatory light."
    - service: scene.turn_on
      target:
        entity_id: scene.conservatory_turn_off_light
    - service: script.send_to_home_log
      data:
        message: ":bulb: Turning off stairs light."
    - service: scene.turn_on
      target:
        entity_id:
          - scene.stairs_light_off
          - scene.stairs_light_2_off
    - service: script.send_to_home_log
      data:
        message: ":bulb: Turning off porch light."
    - service: scene.turn_on
      target:
        entity_id: scene.porch_lights_off
    - service: script.send_to_home_log
      data:
        message: ":bulb: Turning off bathroom light."
    - service: scene.turn_on
      target:
        entity_id: scene.bathroom_turn_off_light
    - if:
        - condition: state
          entity_id: binary_sensor.bedroom_tv_powered_on
          state: "on"
      then:
        - parallel:
            - service: script.send_to_home_log
              data:
                message: "Turning :bed: Bedroom :tv: TV off."
            - service: remote.send_command
              data:
                device: Bedroom TV
                command: power
              target:
                entity_id: remote.bedroom_remote
  mode: single
nfc_bedroom_right:
  alias: NFC Bedroom Right
  sequence:
    - service: script.send_to_home_log
      data:
        message: Turning everything off.
    - service: script.turn_everything_off
  mode: single
  icon: mdi:nfc
downstairs_random_light:
  alias: Downstairs Random Light
  sequence:
    - service: homeassistant.toggle
      data:
        entity_id:
          "{% set group_id = 'light.downstairs_random_lights' %}  {% set max_on
          = 3 %}     {% set lights_on_count = expand(group_id) | selectattr('state',
          'eq', 'on')| list | length %} {% if lights_on_count > max_on %}\n  {% set
          lights_on_entities = expand(group_id) | selectattr('state', 'eq', 'on')| map(attribute='entity_id')
          | list %}\n  {{ lights_on_entities | random }}\n{% else %}\n  {% set group_lights_entities
          =  expand(group_id) | map(attribute='entity_id') | list %}\n  {{ group_lights_entities
          | random }}\n{% endif %}"
  mode: single
  icon: mdi:lightbulb-group
upstairs_random_lights:
  alias: Upstairs Random Lights
  sequence:
    - service: homeassistant.toggle
      data:
        entity_id:
          "{% set group_id = 'light.upstairs_random_lights' %}  {% set max_on
          = 1 %}     {% set lights_on_count = expand(group_id) | selectattr('state',
          'eq', 'on')| list | length %} {% if lights_on_count > max_on %}\n  {% set
          lights_on_entities = expand(group_id) | selectattr('state', 'eq', 'on')| map(attribute='entity_id')
          | list %}\n  {{ lights_on_entities | random }}\n{% else %}\n  {% set group_lights_entities
          =  expand(group_id) | map(attribute='entity_id') | list %}\n  {{ group_lights_entities
          | random }}\n{% endif %}"
  mode: single
  icon: mdi:lightbulb-group
update_travel_time_by_car:
  alias: Update Travel Time By Car
  sequence:
    - parallel:
        - service: homeassistant.update_entity
          data: {}
          target:
            entity_id: sensor.google_travel_time_by_car
        - service: script.send_to_home_log
          data:
            message:
              "Updating.\nOrigin: {{ states('sensor.origin_address') }} \nDestination:
              {{ states('sensor.destination_address') }}"
            title: ":world_map: Travel Time By Car"
  mode: single
  icon: mdi:car
car_set_next_update_location:
  alias: Car Set Next Update Location
  sequence:
    - choose:
        - conditions:
            - condition: state
              entity_id: device_tracker.435i
              state: unavailable
          sequence:
            - service: timer.start
              data:
                duration:
                  "{% set new_ts = (states('input_number.default_update_car_location')|int(0)
                  * 60) %} {{ '{:02d}:{:02d}:{:02d}'.format(new_ts // 3600, (new_ts %
                  3600) // 60, (new_ts % 3600) % 60) }}"
              target:
                entity_id: timer.update_dannys_car
        - conditions:
            - or:
                - condition: numeric_state
                  entity_id: proximity.danny_home
                  below: "10"
                - condition: state
                  entity_id: person.danny
                  state: home
            - condition: numeric_state
              entity_id: proximity.danny_car_home
              below: "10"
          sequence:
            - service: timer.start
              data:
                duration:
                  "{% set new_ts = ((states('input_number.default_update_car_location')|int(0)
                  * 60) * 6) %} {{ '{:02d}:{:02d}:{:02d}'.format(new_ts // 3600, (new_ts
                  % 3600) // 60, (new_ts % 3600) % 60) }}"
              target:
                entity_id: timer.update_dannys_car
      default: []
  mode: single
  icon: mdi:car
calendar_event_started:
  alias: Calendar event Started
  fields:
    entity_id:
      name: Entity ID
      description: Calendar entity ID.
      required: true
    name:
      name: Event name
      description: name of the event.
      required: true
    event_type:
      name: Event type
      description: denote if the it's the start or end of a calendar event.
    offset:
      name: Offset
      description: Time before or after the event type.
    all_day:
      name: All day
      description: if it's an all day event it will be set to true.
    location:
      name: Location
      description: Location of the event.
    start_time:
      name: Start time
      description: Date and time of the start of the event
    end_time:
      name: End time
      description: Date and time of the end of the event
  variables:
    duration: "{{ (as_timestamp(end_time)-as_timestamp(start_time))|int(0) }}"
    duration_formatted: >-
      {% set new_ts = (as_timestamp(end_time)-as_timestamp(start_time))|int(0) %}
      {{ '{:02d}:{:02d}:{:02d}'.format(new_ts // 3600, (new_ts % 3600) // 60, (new_ts % 3600) % 60) }}
    parsed_start_time: >-
      {% set dt = start_time.split('T') %}
      {{ strptime(dt[0].strip()~' '~dt[1], '%Y-%m-%d %H:%M:%S%z', none) }}
  sequence:
    - choose:
        - conditions:
            - condition: template
              value_template: "{{ all_day == false }}"
            - condition: template
              value_template: "{{ location is not none }}"
          sequence:
            - service: script.send_to_home_log
              data:
                message: >-
                  Trigger from {{ state_attr(entity_id, 'friendly_name') }} calendar event.

                  Event: {{ name|default('N/A', true) }}

                  Event Type: {{ event_type|default('N/A', true) }}

                  Offset: {{ offset|default('N/A', true) }}

                  All Day: {{ all_day|default('N/A', true) }}

                  Location: {{ location|default('N/A', true) }}

                  Start Time: {{ start_time|default('N/A', true) }}

                  End Time: {{ end_time|default('N/A', true) }}

                  Duration: {{ duration_formatted }}
                title: ":date: Calendar"
            - parallel:
                - service: input_text.set_value
                  data:
                    value: zone.home
                  target:
                    entity_id: input_text.origin_address
                - service: input_text.set_value
                  data:
                    value: "{{ location|default('', true) }}"
                  target:
                    entity_id: input_text.destination_address
              alias: Set locations
            - service: homeassistant.update_entity
              data: {}
              target:
                entity_id: sensor.google_travel_time_by_car
            - service: script.send_direct_notification
              data:
                message:
                  "Updating.\nOrigin: {{ states('sensor.origin_address') }} \nDestination:
                  {{ states('sensor.destination_address') }}\n\n
                  Journey Time: {{ states('sensor.google_travel_time_by_car') }}"
                title: ":date: Calendar"
                people:
                  - person.danny
        - conditions:
            - condition: template
              value_template: "{{ all_day == true }}"
            - condition: template
              value_template: "{{ location is not none }}"
          sequence:
            - service: script.send_to_home_log
              data:
                message: >-
                  Trigger all day event from {{ state_attr(entity_id, 'friendly_name') }} calendar.

                  Event: {{ name|default('N/A', true) }}

                  Event Type: {{ event_type|default('N/A', true) }}

                  Offset: {{ offset|default('N/A', true) }}

                  All Day: {{ all_day|default('N/A', true) }}

                  Location: {{ location|default('N/A', true) }}

                  Start Time: {{ start_time|default('N/A', true) }}

                  End Time: {{ end_time|default('N/A', true) }}

                  Duration: {{ duration_formatted }}
                title: ":date: Calendar"
            - parallel:
                - service: input_text.set_value
                  data:
                    value: zone.home
                  target:
                    entity_id: input_text.origin_address
                - service: input_text.set_value
                  data:
                    value: "{{ location|default('', true) }}"
                  target:
                    entity_id: input_text.destination_address
              alias: Set locations
            - service: homeassistant.update_entity
              data: {}
              target:
                entity_id: sensor.google_travel_time_by_car
            - service: script.send_direct_notification
              data:
                message:
                  "Updating.\nOrigin: {{ states('sensor.origin_address') }} \nDestination:
                  {{ states('sensor.destination_address') }}\n\n
                  Journey Time: {{ states('sensor.google_travel_time_by_car') }}"
                title: ":date: Calendar"
                people:
                  - person.danny
      default:
        - service: script.send_to_home_log
          continue_on_error: true
          data:
            message: >-
              Unknown trigger from {{ state_attr(entity_id, 'friendly_name') }} calendar.

              Event: {{ name|default('N/A', true) }}

              Event Type: {{ event_type|default('N/A', true) }}

              Offset: {{ offset|default('N/A', true) }}

              All Day: {{ all_day|default('N/A', true) }}

              Location: {{ location|default('N/A', true) }}

              Start Time: {{ start_time|default('N/A', true) }}

              End Time: {{ end_time|default('N/A', true) }}

              Duration: {{ duration_formatted }}
            title: ":date: Calendar"
        - service: script.send_direct_notification
          data:
            message: >-
              Unknown calendar trigger. Attempting to see if it's all day using start and end dates.

              Start date: {{ start_time }}

              End date: {{ end_time }}
            title: ":date: Calendar"
            people:
              - person.danny
