# Created by Danny Tsang <danny@tsang.uk>
automation:
  # Blinds
  - id: "1627285063813"
    alias: "Leo's Bedroom: Timed Open Blinds Weekday"
    description: ""
    trigger:
      - platform: time
        at: "07:45:00"
    condition:
      - condition: state
        entity_id: input_boolean.enable_leos_blind_automations
        state: "on"
      - condition: numeric_state
        entity_id: cover.leos_bedroom_blinds
        attribute: current_position
        below: input_number.blind_closed_position_threshold
      - not:
          - condition: state
            entity_id: input_select.home_mode
            state: "Guest"
      - not:
          - condition: state
            entity_id: input_select.home_mode
            state: "No Children"
      - condition: state
        entity_id: binary_sensor.workday_sensor
        state: "on"
    action:
      - parallel:
          - service: script.send_to_home_log
            data:
              message: Opening blinds.
              title: ":bed: Leo's Bedroom"
              log_level: "Debug"
          - service: cover.open_cover
            target:
              entity_id: cover.leos_bedroom_blinds
    mode: single
  - id: "1627285063816"
    alias: "Leo's Bedroom: Timed Open Blinds Weekend"
    description: ""
    trigger:
      - platform: time
        at: "08:00:00"
    condition:
      - condition: state
        entity_id: input_boolean.enable_leos_blind_automations
        state: "on"
      - condition: numeric_state
        entity_id: cover.leos_bedroom_blinds
        attribute: current_position
        below: input_number.blind_closed_position_threshold
      - not:
          - condition: state
            entity_id: input_select.home_mode
            state: "Guest"
      - not:
          - condition: state
            entity_id: input_select.home_mode
            state: "No Children"
      - condition: state
        entity_id: binary_sensor.workday_sensor
        state: "on"
    action:
      - parallel:
          - service: script.send_to_home_log
            data:
              message: Opening blinds.
              title: ":bed: Leo's Bedroom"
              log_level: "Debug"
          - service: cover.open_cover
            target:
              entity_id: cover.leos_bedroom_blinds
    mode: single
  - id: "1627285063814"
    alias: "Leo's Bedroom: Timed Open Blinds Weekend No Children Mode"
    description: ""
    trigger:
      - platform: time
        at: "09:00:00"
    condition:
      - condition: state
        entity_id: input_boolean.enable_leos_blind_automations
        state: "off"
      - condition: numeric_state
        entity_id: cover.leos_bedroom_blinds
        attribute: current_position
        below: input_number.blind_closed_position_threshold
      - condition: state
        state: "No Children"
        entity_id: input_select.home_mode
      - condition: state
        state: "on"
        entity_id: binary_sensor.workday_sensor
    action:
      - parallel:
          - service: script.send_to_home_log
            data:
              message: Opening blinds with {{ states('input_select.home_mode') }} on a non working day.
              title: ":bed: Leo's Bedroom"
              log_level: "Debug"
          - service: cover.open_cover
            target:
              entity_id: cover.leos_bedroom_blinds
    mode: single
  - id: "1629844319596"
    alias: "Leo's Bedroom: Timed Close Blinds"
    description: ""
    trigger:
      - platform: time
        at: input_datetime.childrens_bed_time
      - platform: time
        at: "22:00:00"
        id: no_children
    condition:
      - not:
          - condition: numeric_state
            entity_id: cover.leos_bedroom_blinds
            attribute: current_position
            below: input_number.blind_closed_position_threshold
      - condition: state
        entity_id: input_boolean.enable_leos_blind_automations
        state: "on"
    action:
      - parallel:
          - choose:
              - conditions:
                  - condition: state
                    entity_id: binary_sensor.leos_bedroom_window_contact
                    state: "on"
                sequence:
                  - service: script.send_to_home_log
                    data:
                      message:
                        ":warning: :clock{{ now().strftime('%I') | int }}{% if now().minute | int
                        > 25 and now().minute | int < 35 %}30{% else %}{% endif %}: :city_sunset: :window: Leo's
                        window is open. Skipping closing blinds. :warning:"
                      title: "Leo's :bed: bedroom"
                      log_level: "Debug"
              - conditions:
                  - condition: state
                    entity_id: input_select.home_mode
                    state: "No Children"
                  - condition: trigger
                    id: no_children
                sequence:
                  - service: script.send_to_home_log
                    data:
                      message:
                        ":clock{{ now().strftime('%I') | int }}{% if now().minute | int
                        > 25 and now().minute | int < 35 %}30{% else %}{% endif %}: :window: Closing
                        Leo's blinds"
                      title: "Leo's :bed: bedroom"
                      log_level: "Debug"
                  - service: cover.close_cover
                    target:
                      entity_id: cover.leos_bedroom_blinds
              - conditions:
                  - condition: state
                    entity_id: binary_sensor.leos_bedroom_window_contact
                    state: "off"
                sequence:
                  - service: script.send_to_home_log
                    data:
                      message:
                        ":clock{{ now().strftime('%I') | int }}{% if now().minute | int
                        > 25 and now().minute | int < 35 %}30{% else %}{% endif %}: :window: Closing
                        Leo's blinds"
                      title: "Leo's :bed: bedroom"
                      log_level: "Debug"
                  - service: cover.close_cover
                    target:
                      entity_id: cover.leos_bedroom_blinds
            default: []
    mode: single
  - id: "1617376203344"
    alias: "Leo's Room: Close Blinds Before Sun Rise"
    description: ""
    trigger:
      - platform: sun
        event: sunrise
        offset: "-02:00:00"
    condition:
      - condition: state
        entity_id: cover.leos_bedroom_blinds
        state: "open"
      - condition: numeric_state
        entity_id: cover.leos_bedroom_blinds
        attribute: current_position
        above: input_number.blind_open_position_threshold
      - condition: state
        entity_id: binary_sensor.leos_bedroom_window_contact
        state: "off"
    action:
      - parallel:
          - service: cover.close_cover
            target:
              entity_id: cover.leos_bedroom_blinds
          - service: script.send_to_home_log
            data:
              message: ":city_sunset: :window: closing Leo's blinds."
              title: "Leo's :bed: bedroom"
              log_level: "Debug"
    mode: single
  - id: "1617376413056"
    alias: "Leo's Room: Open Blinds In The Morning"
    description: ""
    trigger:
      - at: "09:30:00"
        platform: time
    condition:
      - condition: numeric_state
        entity_id: cover.leos_bedroom_blinds
        attribute: current_position
        below: input_number.blind_closed_position_threshold
      - condition: state
        entity_id: input_boolean.enable_leos_blind_automations
        state: "on"
    action:
      - parallel:
          - service: script.send_to_home_log
            data:
              message: ":sunrise: :window: Opening Leo's blinds"
              title: "Leo's :bed: bedroom"
              log_level: "Debug"
          - service: cover.open_cover
            target:
              entity_id: cover.leos_bedroom_blinds
    mode: single
  - id: "1617458869658"
    alias: "Leo's Room: Open Blinds In The Morning When No One Is In Bed"
    description: ""
    trigger:
      - platform: state
        entity_id: binary_sensor.leos_bed_occupied
        from: "on"
        to: "off"
    condition:
      - condition: time
        after: "07:00:00"
        before: "12:00:00"
      - condition: numeric_state
        entity_id: cover.leos_bedroom_blinds
        attribute: current_position
        below: input_number.blind_closed_position_threshold
      - condition: state
        entity_id: input_boolean.enable_leos_blind_automations
        state: "on"
      - condition: state
        entity_id: input_boolean.enable_leos_bed_sensor
        state: "on"
      - not:
          - condition: state
            entity_id: input_select.home_mode
            state: "Guest"
    action:
      - parallel:
          - service: script.send_to_home_log
            data:
              message: ":window: :bed: Someone is in Leo's bed. Closing blinds."
              title: "Leo's :bed: bedroom"
              log_level: "Debug"
          - service: cover.open_cover
            target:
              entity_id: cover.leos_bedroom_blinds
    mode: single
  - id: "1619254173098"
    alias: "Leo's Room: Window Closed At Night"
    description: ""
    trigger:
      - platform: state
        entity_id: binary_sensor.leos_bedroom_window_contact
        to: "off"
        from: "on"
    condition:
      - condition: numeric_state
        entity_id: cover.leos_bedroom_blinds
        attribute: current_position
        above: input_number.blind_open_position_threshold
      - condition: time
        after: "18:30:00"
      - condition: state
        entity_id: input_boolean.enable_leos_blind_automations
        state: "on"
    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: input_boolean.enable_leos_bed_sensor
                state: "on"
              - condition: state
                entity_id: binary_sensor.leos_bed_occupied
                state: "on"
            sequence:
              - service: script.send_to_home_log
                data:
                  message:
                    ":window: :bed: Leo's window closed and someone is in bed. Closing
                    blinds."
                  title: "Leo's :bed: bedroom"
                  log_level: "Debug"
              - service: cover.close_cover
                target:
                  entity_id: cover.leos_bedroom_blinds
          - conditions:
              - condition: state
                entity_id: input_boolean.enable_leos_bed_sensor
                state: "off"
            sequence:
              - service: script.send_to_home_log
                data:
                  message:
                    ":window: :bed: Leo's window closed and someone is in bed. Closing
                    blinds."
                  title: "Leo's :bed: bedroom"
                  log_level: "Debug"
              - service: cover.close_cover
                target:
                  entity_id: cover.leos_bedroom_blinds
        default: []
    mode: single
  # Music
  - id: "1650915676886"
    alias: "Leo's Bedroom: Turn Off Spotify At Night"
    description: ""
    trigger:
      - platform: time
        at: "22:00:00"
    condition:
      - condition: state
        entity_id: media_player.spotify_danny
        attribute: source
        state: "Leo's Bedroom"
      - condition: state
        entity_id: media_player.spotify_danny
        state: "playing"
    action:
      - parallel:
          - service: script.send_to_home_log
            data:
              message:
                ":clock{{ now().strftime('%I') | int }}{% if now().minute | int >
                25 and now().minute | int < 35 %}30{% else %}{% endif %}: Turning off :musical_note:
                music in Leo's Bedroom :radio: Echo."
              title: "Leo's :bed: bedroom"
              log_level: "Debug"
          - service: media_player.media_pause
            data: {}
            target:
              entity_id: media_player.spotify_danny
    mode: single

script:
  leos_bedroom_close_blinds_by_weather:
    alias: Leo's Bedroom Close Blinds Based Weather
    description: "Close Leo's bedroom blinds depending on the weather."
    fields:
      temperature:
        description: Temperature in celcius.
        required: true
        selector:
          number:
            min: -20
            max: 50
            step: 0.1
            unit_of_measurement: "°c"
            mode: "box"
      weather_condition:
        description: Text weather condition e.g. lightning-rainy
        required: true
        selector:
          text:
    sequence:
      # Only run the weather check if it's during the day otherwise it might be closed for evening.
      - if:
          - condition: sun
            before: sunset
          # TODO: Make this dynmaic e.g. season / lux value.
          # Sun reaches the back of the house around this time.
          - condition: time
            after: "14:00:00"
          - condition: state
            entity_id: input_boolean.enable_leos_blind_automations
            state: "on"
          - condition: numeric_state
            entity_id: cover.leos_bedroom_blinds
            attribute: current_position
            above: input_number.blind_open_position_threshold
        then:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ weather_condition in ['sunny','partlycloudy'] }}"
                sequence:
                  - choose:
                      # Check if window is open.
                      - conditions:
                          - condition: state
                            entity_id: binary_sensor.leos_bedroom_window_contact
                            state: "on"
                        sequence:
                          # TODO: replace with actionable notification
                          - service: script.send_to_home_log
                            data:
                              message:
                                "It's going to be hot ({{ temperature }} {{ weather_condition }}) and
                                the :window: window is open preventing the blinds from closing."
                              title: "Leo's :bed: Bedroom"
                              log_level: "Debug"
                    default:
                      - service: script.send_to_home_log
                        data:
                          message: "It's going to be hot ({{ temperature }} {{ weather_condition }}). Closing blinds."
                          title: "Leo's :bed: Bedroom"
                          log_level: "Debug"
                      - service: cover.close_cover
                        target:
                          entity_id: cover.leos_bedroom_blinds
            default: []
    mode: single
    icon: mdi:roller-shade-closed

sensor:
  - platform: mold_indicator
    name: Leo's Bedroom Mould Indicator
    indoor_temp_sensor: sensor.leos_bed_temperature
    indoor_humidity_sensor: sensor.leos_bed_humidity
    outdoor_temp_sensor: sensor.gw2000a_outdoor_temperature
    calibration_factor: 1.44

template:
  - binary_sensor:
      - name: Leos Bed Occupied
        unique_id: 39400d6f-3155-4bb1-8c2d-0c6d5004aab8
        icon: >-
          mdi:bed-double{{ '-outline' if (states('sensor.leos_bed_top_left') | float(0)) >= 0.06 or
          (states('sensor.leos_bed_top_right') | float(0)) >= 0.06 or
          (states('sensor.leos_bed_bottom_left') | float(0)) >= 0.07 or
          (states('sensor.leos_bed_bottom_right') | float(0)) >= 0.06
          else '' }}
        device_class: occupancy
        state: >-
          {% if (states('sensor.leos_bed_top_left') | float(0)) >= 0.06
            or (states('sensor.leos_bed_top_right') | float(0)) >= 0.06
            or (states('sensor.leos_bed_bottom_left') | float(0)) >= 0.07
            or (states('sensor.leos_bed_bottom_right') | float(0)) >= 0.06 %}
            on
          {% else %}
            off
          {% endif %}
        attributes:
          top_left: "{{ states('sensor.leos_bed_top_left') }}"
          top_right: "{{ states('sensor.leos_bed_top_right') }}"
          bottom_left: "{{ states('sensor.leos_bed_bottom_left') }}"
          bottom_right: "{{ states('sensor.leos_bed_bottom_right') }}"
  - trigger:
      - platform: state
        entity_id:
          - binary_sensor.leos_bedroom_window_contact
          - input_number.close_blinds_brightness_threshold
          - input_number.forecast_high_temperature
          - sensor.back_garden_motion_illuminance_lux
          - sensor.leos_bedroom_area_mean_temperature
          - sensor.leos_bedroom_window_temperature
          - sun.sun
          - sensor.temperature_forecast_next_hour
          - weather.home
      - platform: time_pattern
        minutes: "/15"
    binary_sensor:
      - name: Leo's Bedroom Blind Anticipated State
        unique_id: a80c96a7-50bb-4d5b-a950-352763d3d6fd
        device_class: opening
        state: >-
          {{ not(states('sensor.back_garden_motion_illuminance_lux')|float(0) < states('input_number.close_blinds_brightness_threshold')|float(10000)
          and not(states('sun.sun') == 'above_horizon')
          and states('binary_sensor.leos_bedroom_window_contact') == 'off')
          and states('sensor.temperature_forecast_next_hour')|float(0) < states('input_number.forecast_high_temperature')|float(24)
          and (states('sensor.leos_bedroom_area_mean_temperature')|float(0)) <= 23.5
          and (states('sensor.leos_bedroom_window_temperature')|float(0)) <= 24
          and not(states('weather.home') in ['sunny','partlycloudy']) }}
        attributes:
          brightness: "{{ (states('sensor.front_garden_motion_illuminance_lux')|float(0)) < (states('input_number.close_blinds_brightness_threshold')|float(10000)) }}"
          sun: "{{ states('sun.sun') == 'above_horizon' }}"
          temperature: "{{ (states('sensor.leos_bedroom_area_mean_temperature')|float(0)) > 23.5 }}"
          temperature_hour_forecast: "{{ states('sensor.temperature_forecast_next_hour')|float(0) < states('input_number.forecast_high_temperature')|float(24) }}"
          weather: "{{ states('home_hourly')|default('') in ['sunny','partlycloudy'] }}"
          window: "{{ states('binary_sensor.leos_bedroom_window_contact') == 'off' }}"
          window_temperature: "{{ (states('sensor.leos_bedroom_window_temperature')|float(0)) > 24 }}"
