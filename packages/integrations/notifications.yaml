# Created by Danny Tsang <danny@tsang.uk>
# Integration: https://www.home-assistant.io/integrations/slack/
# Integration: https://www.home-assistant.io/integrations/mobile_app/
# Integration: https://www.home-assistant.io/integrations/telegram/
automation:
  - id: "1625924056779"
    alias: Mobile Notification Action Router
    description: ""
    trigger:
      - platform: event
        event_type: mobile_app_notification_action
        event_data: {}
    condition: []
    action:
      - choose:
          - conditions:
              - condition: template
                value_template:
                  "{{ trigger.event.data.action == 'set_bedroom_blinds_30'
                  }}"
              - condition: numeric_state
                entity_id: cover.bedroom_blinds
                attribute: current_position
                above: "30"
            sequence:
              - service: script.send_to_home_log
                data:
                  message: ":window: Closing bedroom blinds event received."
              - service: cover.set_cover_position
                target:
                  entity_id: cover.bedroom_blinds
                data:
                  position: 30
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.action == 'server_fan_off' }}"
            sequence:
              - service: script.send_to_home_log
                data:
                  message: Turning off server fan event received.
              - service: switch.turn_off
                target:
                  entity_id: switch.server_fan
          - conditions:
              - condition: template
                value_template:
                  "{{ trigger.event.data.action == 'switch_on_office_fan'
                  }}"
            sequence:
              - service: script.send_to_home_log
                data:
                  message: Turning on office fan event received.
              - service: switch.turn_on
                target:
                  entity_id: switch.office_fan
          - conditions:
              - condition: template
                value_template:
                  "{{ trigger.event.data.action == 'switch_on_fridge_freezer'
                  }}"
            sequence:
              - service: script.send_to_home_log
                data:
                  message: Turning on fridge freezer event received.
              - service: switch.turn_on
                target:
                  entity_id: switch.fridge_freezer
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.action == 'switch_on_freezer' }}"
            sequence:
              - service: script.send_to_home_log
                data:
                  message: Turning on freezer event received.
              - service: switch.turn_on
                target:
                  entity_id: switch.freezer
          - conditions:
              - condition: template
                value_template:
                  "{{ trigger.event.data.action == 'guest_mode_arm_alarm_and_turn_off_devices'
                  }}"
            sequence:
              - service: script.send_to_home_log
                data:
                  message: ":bell: Guest mode override. Turning alarm on and devices off."
              - service: script.set_alarm_to_away_mode
              - service: script.everybody_leave_home
          - conditions:
              - condition: template
                value_template:
                  "{{ trigger.event.data.action == 'guest_mode_arm_alarm_away'
                  }}"
              - condition: state
                entity_id: input_select.home_mode
                state: Guest
            sequence:
              - service: script.send_to_home_log
                data:
                  message:
                    ":bell: Guest mode override. Turning alarm in away mode (motion
                    and sensors) on only."
              - service: script.set_alarm_to_away_mode
          - conditions:
              - condition: template
                value_template:
                  "{{ trigger.event.data.action == 'guest_mode_turn_off_devices'
                  }}"
            sequence:
              - service: script.send_to_home_log
                data:
                  message: Guest mode override. Turning devices off only.
              - service: script.everybody_leave_home
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.action == 'switch_off_alarm' }}"
            sequence:
              - service: script.send_to_home_log
                data:
                  message: Alarm override. Turning Alarm off.
              - service: script.set_alarm_to_disarmed_mode
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.action == 'switch_off_attic_lights' }}"
            sequence:
              - service: script.send_to_home_log
                data:
                  message: Turning attic lights off event.
              - service: switch.turn_off
                data: {}
                target:
                  entity_id: switch.attic_lights
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.action == 'update_home_assistant' }}"
            sequence:
              - service: script.send_to_home_log
                data:
                  message: Upgrade Home Assistant event.
              - service: update.install
                data:
                  backup: true
                target:
                  entity_id: update.home_assistant_core_update
        default: []
    mode: queued
    max: 10

input_text:
  # Need the Telegram chat id for telegram integration platform
  # so no point in storing it in a helper and secret.
  dannys_telegram_chat_id:
    name: Danny's Telegram Chat ID
    icon: mdi:message-reply-text
    initial: !secret telegram_danny_chat_id

notify:
  - platform: telegram
    name: telegram
    chat_id: !secret telegram_danny_chat_id

script:
  # Encapsulated scripts
  send_to_home_log:
    alias: Send To Home Log
    icon: mdi:message-outline
    description: "Post a text message to the home_log channel."
    # https://github.com/home-assistant/frontend/issues/8591
    fields:
      message:
        description: Message to post.
        required: true
      title:
        description: (optional)Title to the message posted.
    sequence:
      - if:
          - condition: state
            entity_id: input_boolean.enable_notifications
            state: "on"
        then:
          - if:
            - condition: template
              value_template: "{{ 'Slack' in states('input_text.home_log_platforms') }}"
            then:
              - service: script.post_slack_notification
                data:
                  message: "{{ message }}"
                  title: "{{ title|default(none, true) }}"
                  target: "{{ states('input_text.slack_home_log_channel_id') }}"
                continue_on_error: true
          - if:
            - condition: template
              value_template: "{{ 'Discord' in states('input_text.home_log_platforms') }}"
            then:
              - service: script.post_discord_notification
                data:
                  message: "{{ message }}"
                  title: "{{ title|default(none, true) }}"
                  target: "{{ states('input_text.discord_home_log_channel_id') }}"
                continue_on_error: true
    mode: queued
    max: 10
  send_direct_notification:
    alias: Send Direct Mesage To a Person
    icon: mdi:message-outline
    description: "Send a direct text message to adults in the house."
    fields:
      message:
        description: Message to post
        required: true
      title:
        description: Title to post
      people:
        description:
          (optional)People to message using people entity in a comma separated list.
          If no one is specified, it will go to everyone.
        example: "['person.danny'] or ['person.danny','person.terina']"
    variables:
      # Get people's preferred messaging platform
      slack: "{% set platforms = namespace(slack=[]) %}
        {% set persons = states('input_text.direct_message_list') if people|default('', true)|length == 0  else people %}
        {% for p in persons|default([]) %}
          {% if p == 'person.danny' %}
            {% if 'Slack'|lower in states('input_text.dannys_direct_notification_preference')|lower %}
              {% set platforms.slack = platforms.slack + [p] %}
            {% endif %}
          {% elif p == 'person.terina' %}
            {% if 'Slack'|lower in states('input_text.terinas_direct_notification_preference') %}
              {% set platforms.slack = platforms.slack + [p] %}
            {% endif %}
          {% elif p == 'person.leo' %}
            {% if 'Slack'|lower in states('input_text.leos_direct_notification_preference') %}
              {% set platforms.slack = platforms.slack + [p] %}
            {% endif %}
          {% endif %}
        {% endfor %}
        {{ platforms.slack }}"
      discord: "{% set platforms = namespace(discord=[]) %}
        {% for p in people|default([]) %}
          {% if p == 'person.danny' %}
            {% if 'Discord'|lower in states('input_text.dannys_direct_notification_preference')|lower %}
              {% set platforms.discord = platforms.discord + [p] %}
            {% endif %}
          {% elif p == 'person.terina' %}
            {% if 'Discord'|lower in states('input_text.terinas_direct_notification_preference')|lower %}
              {% set platforms.discord = platforms.discord + [p] %}
            {% endif %}
          {% elif p == 'person.leo' %}
            {% if 'Discord'|lower in states('input_text.leos_direct_notification_preference')|lower %}
              {% set platforms.discord = platforms.discord + [p] %}
            {% endif %}
          {% endif %}
        {% endfor %}
        {{ platforms.discord }}"
      mobile: "{% set platforms = namespace(mobile=[]) %}
        {% for p in people|default([]) %}
          {% if p == 'person.danny' %}
            {% if 'Mobile'|lower in states('input_text.dannys_direct_notification_preference')|lower %}
              {% set platforms.mobile = platforms.mobile + [p] %}
            {% endif %}
          {% elif p == 'person.terina' %}
            {% if 'Mobile'|lower in states('input_text.terinas_direct_notification_preference')|lower %}
              {% set platforms.mobile = platforms.mobile + [p] %}
            {% endif %}
          {% elif p == 'person.leo' %}
            {% if 'Mobile'|lower in states('input_text.leos_direct_notification_preference')|lower %}
              {% set platforms.mobile = platforms.mobile + [p] %}
            {% endif %}
          {% endif %}
        {% endfor %}
        {{ platforms.mobile }}"
      telegram: "{% set platforms = namespace(telegram=[]) %}
        {% for p in people|default([]) %}
          {% if p == 'person.danny' %}
            {% if 'Telegram'|lower in states('input_text.dannys_direct_notification_preference')|lower %}
              {% set platforms.telegram = platforms.telegram + [p] %}
            {% endif %}
          {% elif p == 'person.terina' %}
            {% if 'Telegram'|lower in states('input_text.terinas_direct_notification_preference')|lower %}
              {% set platforms.telegram = platforms.telegram + [p] %}
            {% endif %}
          {% elif p == 'person.leo' %}
            {% if 'Telegram'|lower in states('input_text.leos_direct_notification_preference')|lower %}
              {% set platforms.telegram = platforms.telegram + [p] %}
            {% endif %}
          {% endif %}
        {% endfor %}
        {{ platforms.telegram }}"
      whatsapp: "{% set platforms = namespace(telegram=[]) %}
        {% for p in people|default([]) %}
          {% if p == 'person.danny' %}
            {% if 'WhatsApp'|lower in states('input_text.dannys_direct_notification_preference')|lower %}
              {% set platforms.telegram = platforms.telegram + [p] %}
            {% endif %}
          {% elif p == 'person.terina' %}
            {% if 'WhatsApp'|lower in states('input_text.terinas_direct_notification_preference')|lower %}
              {% set platforms.telegram = platforms.telegram + [p] %}
            {% endif %}
          {% elif p == 'person.leo' %}
            {% if 'WhatsApp'|lower in states('input_text.leos_direct_notification_preference')|lower %}
              {% set platforms.telegram = platforms.telegram + [p] %}
            {% endif %}
          {% endif %}
        {% endfor %}
        {{ platforms.telegram }}"
    sequence:
      - service: script.send_to_home_log
        data:
          message: "{{ message }}"
          title: "{{ title|default(none, true) }}"
      # Check if notifications is turned on.
      - if:
          - condition: state
            entity_id: input_boolean.enable_direct_notifications
            state: "on"
        then:
          # Check anyone has set Slack for their direct messages
          - if:
              - condition: template
                value_template: "{{ slack|default('', true)|length > 0 }}"
            then:
              - service: script.post_slack_notification
                data:
                  message: "{{ message }}"
                  title: "{{ title|default(none, true) }}"
                  target: "{{ states('input_text.slack_general_channel_id') }}"
                  people: "{{ slack|join(' ')|replace('person.danny', states('input_text.dannys_slack_id'))
                  |replace('person.terina', states('input_text.terinas_slack_id'))
                  |replace('person.leo', states('input_text.leos_slack_id')) }}"
                continue_on_error: true
          - if:
              - condition: template
                value_template: "{{ discord|default('', true)|length > 0 }}"
            then:
              - service: script.post_discord_notification
                data:
                  message: "{{ message }}"
                  title: "{{ title|default(none, true) }}"
                  target: "{{ states('input_text.discord_general_channel_id') }}"
                  people: "{{ discord|join(' ')|replace('person.danny', '<@'~states('input_text.dannys_discord_chat_id')~'>')
                    |replace('person.terina', '<@'~states('input_text.terinas_discord_chat_id')~'>')
                    |replace('person.leo', '<@'~states('input_text.leos_discord_chat_id')~'>') }}"
                continue_on_error: true
          - repeat:
              for_each: "{{ telegram|default([], true) }}"
              sequence:
                - service: script.post_telegram_direct_notification
                  data:
                    message: "{{ message }}"
                    title: "{{ title|default(none, true) }}"
                    target: "general"
                    people: "{{ repeat.item|replace('person.danny', states('input_text.dannys_telegram_chat_id')) }}"
                  continue_on_error: true
          - repeat:
              for_each: "{{ mobile|default([], true) }}"
              sequence:
                - choose:
                    - conditions:
                      - condition: template
                        value_template: "{{ repeat.item == 'person.danny' }}"
                      sequence:
                        - service: notify.mobile_app_danny_s_phone
                          data:
                            message: "{{ message }}"
                            title: "{{ title|default(none, true) }}"
                          continue_on_error: true
                    - conditions:
                      - condition: template
                        value_template: "{{ repeat.item == 'person.terina' }}"
                      sequence:
                        - service: notify.mobile_app_terina_s_phone
                          data:
                            message: "{{ message }}"
                            title: "{{ title|default(none, true) }}"
                          continue_on_error: true
                    - conditions:
                      - condition: template
                        value_template: "{{ repeat.item == 'person.leo' }}"
                      sequence:
                        - service: notify.mobile_app_ipad_air_4th_generation
                          data:
                            message: "{{ message }}"
                            title: "{{ title|default(none, true) }}"
                          continue_on_error: true
                  default: []
          - repeat:
              for_each: "{{ whatsapp|default([], true) }}"
              sequence:
                - service: script.post_whatsapp_direct_notification
                  data:
                    message: "{{ message }}"
                    people: "{{ repeat.item }}"
                  continue_on_error: true
    mode: queued
    max: 10
  send_home_log_with_local_attachments:
    alias: Send To Home Log With Local Attachments
    icon: mdi:message-image-outline
    description: "Post a message with a file attachment to the home_log channel."
    fields:
      message:
        description: Message to post
        required: true
      title:
        description: (optional)Title to the message posted.
      filePath:
        description: File path to attach to post.
        required: true
        example: "/config/www/myImage.jpg"
      people:
        description:
          (optional)People to message using people entity in a comma separated list.
          If no one is specified, it will be posted to the home log.
        example: "['person.danny'] or ['person.danny','person.terina']"
    variables:
      # Get people's preferred messaging platform
      slack: "{% set platforms = namespace(slack=[]) %}
        {% for p in people|default([]) %}
          {% if p == 'person.danny' %}
            {% if 'Slack'|lower in states('input_text.dannys_direct_notification_preference')|lower %}
              {% set platforms.slack = platforms.slack + [p] %}
            {% endif %}
          {% elif p == 'person.terina' %}
            {% if 'Slack'|lower in states('input_text.terinas_direct_notification_preference') %}
              {% set platforms.slack = platforms.slack + [p] %}
            {% endif %}
          {% elif p == 'person.leo' %}
            {% if 'Slack'|lower in states('input_text.leos_direct_notification_preference') %}
              {% set platforms.slack = platforms.slack + [p] %}
            {% endif %}
          {% endif %}
        {% endfor %}
        {{ platforms.slack }}"
      discord: "{% set platforms = namespace(discord=[]) %}
        {% for p in people|default([]) %}
          {% if p == 'person.danny' %}
            {% if 'Discord'|lower in states('input_text.dannys_direct_notification_preference')|lower %}
              {% set platforms.discord = platforms.discord + [p] %}
            {% endif %}
          {% elif p == 'person.terina' %}
            {% if 'Discord'|lower in states('input_text.terinas_direct_notification_preference')|lower %}
              {% set platforms.discord = platforms.discord + [p] %}
            {% endif %}
          {% elif p == 'person.leo' %}
            {% if 'Discord'|lower in states('input_text.leos_direct_notification_preference')|lower %}
              {% set platforms.discord = platforms.discord + [p] %}
            {% endif %}
          {% endif %}
        {% endfor %}
        {{ platforms.discord }}"
      telegram: "{% set platforms = namespace(telegram=[]) %}
        {% for p in people|default([]) %}
          {% if p == 'person.danny' %}
            {% if 'Telegram'|lower in states('input_text.dannys_direct_notification_preference')|lower %}
              {% set platforms.telegram = platforms.telegram + [p] %}
            {% endif %}
          {% elif p == 'person.terina' %}
            {% if 'Telegram'|lower in states('input_text.terinas_direct_notification_preference')|lower %}
              {% set platforms.telegram = platforms.telegram + [p] %}
            {% endif %}
          {% elif p == 'person.leo' %}
            {% if 'Telegram'|lower in states('input_text.leos_direct_notification_preference')|lower %}
              {% set platforms.telegram = platforms.telegram + [p] %}
            {% endif %}
          {% endif %}
        {% endfor %}
        {{ platforms.telegram }}"
    sequence:
      - parallel:
          - if:
              - condition: state
                entity_id: input_boolean.enable_notifications
                state: "on"
            then:
              - parallel:
                  - service: script.post_to_slack_with_local_attachments
                    data:
                      message: "{{ message }}"
                      title: "{{ title|default(none, true) }}"
                      target: "{{ states('input_text.slack_home_log_channel_id') }}"
                      filePath: "{{ filePath }}"
                    continue_on_error: true
                  - service: script.post_to_discord_with_local_attachments
                    data:
                      message: "{{ message }}"
                      title: "{{ title|default(none, true) }}"
                      target: "{{ states('input_text.discord_home_log_channel_id') }}"
                      filePath: "{{ filePath }}"
                    continue_on_error: true
          # Check if people parameter has been set before checking which platform to send file attachments.
          - if:
              - condition: template
                value_template: "{{ people|default('', true)|length > 0 }}"
              - condition: state
                entity_id: input_boolean.enable_direct_notifications
                state: "on"
            then:
              - if:
                  - condition: template
                    value_template: "{{ slack|default('', true)|length > 0 }}"
                then:
                  - service: script.post_to_slack_with_local_attachments
                    data:
                      message: "{{ message }}"
                      title: "{{ title|default(none, true) }}"
                      target: "{{ states('input_text.slack_general_channel_id') }}"
                      people: "{{ slack|join(' ')|replace('person.danny', states('input_text.dannys_slack_id'))
                      |replace('person.terina', states('input_text.terinas_slack_id'))
                      |replace('person.leo', states('input_text.leos_slack_id')) }}"
                      filePath: "{{ filePath }}"
                    continue_on_error: true
              - if:
                  - condition: template
                    value_template: "{{ discord|default('', true)|length > 0 }}"
                then:
                  - service: script.post_to_discord_with_local_attachments
                    data:
                      message: "{{ message }}"
                      title: "{{ title|default(none, true) }}"
                      target: "{{ states('input_text.discord_general_channel_id') }}"
                      people: "{{ discord|join(' ')|replace('person.danny', '<@'~states('input_text.dannys_discord_chat_id')~'>')
                      |replace('person.terina', '<@'~states('input_text.terinas_discord_chat_id')~'>')
                      |replace('person.leo', '<@'~states('input_text.leos_discord_chat_id')~'>') }}"
                      filePath: "{{ filePath }}"
                    continue_on_error: true
              - repeat:
                  for_each: "{{ telegram|default([], true) }}"
                  sequence:
                    - service: script.post_to_discord_with_local_attachments
                      data:
                        message: "{{ message }}"
                        title: "{{ title|default(none, true) }}"
                        target: "general"
                        people: "{{ repeat.item|replace('person.danny', '<@'~states('input_text.dannys_telegram_chat_id'))~'>' }}"
                        filePath: "{{ filePath }}"
                      continue_on_error: true
    mode: queued
    max: 10
  send_home_log_with_url:
    alias: Send To Home Log With URL
    icon: mdi:message-bookmark-outline
    description: "Post a message with a URL to the home_log channel."
    fields:
      message:
        description: Message to post
        required: true
      title:
        description: (optional)Title to the message posted.
      url:
        description: (optional)Link to file.
        required: true
    sequence:
      - if:
          - condition: state
            entity_id: input_boolean.enable_notifications
            state: "on"
        then:
          - parallel:
              - service: script.post_to_slack_with_url_attachment
                data:
                  message: "{{ message }}"
                  title: "{{ title|default(none, true) }}"
                  target: "{{ states('input_text.slack_home_log_channel_id') }}"
                  url: "{{ url }}"
              - service: script.post_to_discord_with_url_attachment
                data:
                  message: "{{ message }}"
                  title: "{{ title|default(none, true) }}"
                  target: "{{ states('input_text.discord_home_log_channel_id') }}"
                  url: "{{ url }}"
    mode: queued
    max: 10
  send_actionable_notification_with_2_buttons:
    alias: Send Actionable Notification With 2 Buttons
    icon: mdi:message-draw
    fields:
      message:
        description: Message to post
        required: true
      title:
        description: (optional)Title to the message posted.
      people:
        description: People to message.
        example: "['person.danny'] or ['person.danny','person.terina']"
        required: true
      action1_title:
        description: First action text.
        required: true
      action1_name:
        description: First vent name if action is selected.
        required: true
      action2_title:
        description: Second action text.
        required: true
      action2_name:
        description: Second event name if action is selected.
        required: true
    variables:
      # Get people's preferred messaging platform
      mobile: "{% set platforms = namespace(slack=[]) %}
        {% set persons = states('input_text.direct_message_list') if people|default('', true)|length == 0  else people %}
        {% for p in persons|default([]) %}
          {% if p == 'person.danny' %}
            {% if 'Slack'|lower in states('input_text.dannys_direct_notification_preference')|lower %}
              {% set platforms.slack = platforms.slack + [p] %}
            {% endif %}
          {% elif p == 'person.terina' %}
            {% if 'Slack'|lower in states('input_text.terinas_direct_notification_preference') %}
              {% set platforms.slack = platforms.slack + [p] %}
            {% endif %}
          {% elif p == 'person.leo' %}
            {% if 'Slack'|lower in states('input_text.leos_direct_notification_preference') %}
              {% set platforms.slack = platforms.slack + [p] %}
            {% endif %}
          {% endif %}
        {% endfor %}
        {{ platforms.slack }}"
      telegram: "{% set platforms = namespace(telegram=[]) %}
        {% for p in people|default([]) %}
          {% if p == 'person.danny' %}
            {% if 'Telegram'|lower in states('input_text.dannys_direct_notification_preference')|lower %}
              {% set platforms.telegram = platforms.telegram + [p] %}
            {% endif %}
          {% elif p == 'person.terina' %}
            {% if 'Telegram'|lower in states('input_text.terinas_direct_notification_preference')|lower %}
              {% set platforms.telegram = platforms.telegram + [p] %}
            {% endif %}
          {% elif p == 'person.leo' %}
            {% if 'Telegram'|lower in states('input_text.leos_direct_notification_preference')|lower %}
              {% set platforms.telegram = platforms.telegram + [p] %}
            {% endif %}
          {% endif %}
        {% endfor %}
        {{ platforms.telegram }}"
    sequence:
      - if:
          - condition: state
            entity_id: input_boolean.enable_direct_notifications
            state: "on"
        then:
          - repeat:
              for_each: "{{ telegram|default([], true) }}"
              sequence:
                - service: script.post_telegram_direct_notification
                  data:
                    message: "{{ message }}"
                    title: "{{ title|default(none, true) }}"
                    target: "general"
                    people: "{{ repeat.item|replace('person.danny', states('input_text.dannys_telegram_chat_id')) }}"
          - repeat:
              for_each: "{{ mobile|default([], true) }}"
              sequence:
                - choose:
                    - conditions:
                      - condition: template
                        value_template: "{{ repeat.item == 'person.danny' }}"
                      sequence:
                        - service: notify.mobile_app_danny_s_phone
                          data:
                            message: "{{ message }}"
                            title: "{{ title|default('', true) }}"
                            data:
                              actions:
                                - title: "{{ action1_title }}"
                                  action: "{{ action1_name }}"
                                - title: "{{ action2_title }}"
                                  action: "{{ action2_name }}"
                    - conditions:
                      - condition: template
                        value_template: "{{ repeat.item == 'person.terina' }}"
                      sequence:
                        - service: notify.mobile_app_terina_s_phone
                          data:
                            message: "{{ message }}"
                            title: "{{ title|default('', true) }}"
                            data:
                              actions:
                                - title: "{{ action1_title }}"
                                  action: "{{ action1_name }}"
                                - title: "{{ action2_title }}"
                                  action: "{{ action2_name }}"
                    - conditions:
                      - condition: template
                        value_template: "{{ repeat.item == 'person.leo' }}"
                      sequence:
                        - service: notify.mobile_app_ipad_air_4th_generation
                          data:
                            message: "{{ message }}"
                            title: "{{ title|default('', true) }}"
                            data:
                              actions:
                                - title: "{{ action1_title }}"
                                  action: "{{ action1_name }}"
                                - title: "{{ action2_title }}"
                                  action: "{{ action2_name }}"
    mode: queued
    max: 10
  send_actionable_notification_with_3_buttons:
    alias: Send Actionable Notification With 3 Buttons
    icon: mdi:message-draw
    fields:
      message:
        description: Message to post
        required: true
      title:
        description: (optional)Title to the message posted.
      people:
        description: People to message.
        example: "['person.danny'] or ['person.danny','person.terina']"
        required: true
      action1_title:
        description: First action text.
      action1_name:
        description: First vent name if action is selected.
        required: true
      action2_title:
        description: Second action text.
        required: true
      action2_name:
        description: Second event name if action is selected.
        required: true
      action3_title:
        description: Third action text.
        required: true
      action3_name:
        description: Third event name if action is selected.
        required: true
    variables:
      # Get people's preferred messaging platform
      mobile: "{% set platforms = namespace(slack=[]) %}
        {% set persons = states('input_text.direct_message_list') if people|default('', true)|length == 0  else people %}
        {% for p in persons|default([]) %}
          {% if p == 'person.danny' %}
            {% if 'Slack'|lower in states('input_text.dannys_direct_notification_preference')|lower %}
              {% set platforms.slack = platforms.slack + [p] %}
            {% endif %}
          {% elif p == 'person.terina' %}
            {% if 'Slack'|lower in states('input_text.terinas_direct_notification_preference') %}
              {% set platforms.slack = platforms.slack + [p] %}
            {% endif %}
          {% elif p == 'person.leo' %}
            {% if 'Slack'|lower in states('input_text.leos_direct_notification_preference') %}
              {% set platforms.slack = platforms.slack + [p] %}
            {% endif %}
          {% endif %}
        {% endfor %}
        {{ platforms.slack }}"
      telegram: "{% set platforms = namespace(telegram=[]) %}
        {% for p in people|default([]) %}
          {% if p == 'person.danny' %}
            {% if 'Telegram'|lower in states('input_text.dannys_direct_notification_preference')|lower %}
              {% set platforms.telegram = platforms.telegram + [p] %}
            {% endif %}
          {% elif p == 'person.terina' %}
            {% if 'Telegram'|lower in states('input_text.terinas_direct_notification_preference')|lower %}
              {% set platforms.telegram = platforms.telegram + [p] %}
            {% endif %}
          {% elif p == 'person.leo' %}
            {% if 'Telegram'|lower in states('input_text.leos_direct_notification_preference')|lower %}
              {% set platforms.telegram = platforms.telegram + [p] %}
            {% endif %}
          {% endif %}
        {% endfor %}
        {{ platforms.telegram }}"
    sequence:
      - if:
          - condition: state
            entity_id: input_boolean.enable_direct_notifications
            state: "on"
        then:
          - repeat:
              for_each: "{{ telegram|default([], true) }}"
              sequence:
                - service: script.post_telegram_direct_notification
                  data:
                    message: "{{ message }}"
                    title: "{{ title|default(none, true) }}"
                    target: "general"
                    people: "{{ repeat.item|replace('person.danny', states('input_text.dannys_telegram_chat_id')) }}"
          - repeat:
              for_each: "{{ mobile|default([], true) }}"
              sequence:
                - choose:
                    - conditions:
                      - condition: template
                        value_template: "{{ repeat.item == 'person.danny' }}"
                      sequence:
                        - service: notify.mobile_app_danny_s_phone
                          data:
                            message: "{{ message }}"
                            title: "{{ title|default('', true) }}"
                            data:
                              actions:
                                - title: "{{ action1_title }}"
                                  action: "{{ action1_name }}"
                                - title: "{{ action2_title }}"
                                  action: "{{ action2_name }}"
                                - title: "{{ action3_title }}"
                                  action: "{{ action3_name }}"
                    - conditions:
                      - condition: template
                        value_template: "{{ repeat.item == 'person.terina' }}"
                      sequence:
                        - service: notify.mobile_app_terina_s_phone
                          data:
                            message: "{{ message }}"
                            title: "{{ title|default('', true) }}"
                            data:
                              actions:
                                - title: "{{ action1_title }}"
                                  action: "{{ action1_name }}"
                                - title: "{{ action2_title }}"
                                  action: "{{ action2_name }}"
                                - title: "{{ action3_title }}"
                                  action: "{{ action3_name }}"
                    - conditions:
                      - condition: template
                        value_template: "{{ repeat.item == 'person.leo' }}"
                      sequence:
                        - service: notify.mobile_app_ipad_air_4th_generation
                          data:
                            message: "{{ message }}"
                            title: "{{ title|default('', true) }}"
                            data:
                              actions:
                                - title: "{{ action1_title }}"
                                  action: "{{ action1_name }}"
                                - title: "{{ action2_title }}"
                                  action: "{{ action2_name }}"
                                - title: "{{ action3_title }}"
                                  action: "{{ action3_name }}"
          - service: script.send_actionable_notification_with_3_buttons
            data:
              message: "{{ message }}"
              title: "{{ title|default(none, true) }}"
              people: "{{ people }}"
              data:
                action1_title: "{{ action1_title }}"
                action1_name: "{{ action1_name }}"
                action2_title: "{{ action2_title }}"
                action2_name: "{{ action2_name }}"
                action3_title: "{{ action3_title }}"
                action3_name: "{{ action3_name }}"
    mode: single
  send_to_computers:
    alias: "Send notification to computers"
    icon: mdi:message-draw
    description: >-
      Send notification to computeres.
    fields:
      message:
        description: Message to post
        required: true
      title:
        description: (optional)Title to the message posted.
      filePath:
        description: File path to attach to post.
      duration:
        description: >
          How long to display the notification in seconds. It will default to 10 seconds if one has not been set.
        default: 10
    sequence:
      - if:
          - condition: state
            entity_id: input_boolean.enable_computer_notifications
            state: "on"
        then:
          - parallel:
              - if:
                  - not:
                    - condition: state
                      entity_id: media_player.jd
                      state: "unavailable"
                then:
                  - service: script.post_to_hass_agent
                    data:
                      message: "{{ message }}"
                      title: "{{ title }}"
                      filePath: "{{ filePath }}"
                      device: notify.jd
                      duration: "{{ duration }}"
              - if:
                  - not:
                    - condition: state
                      entity_id: media_player.sam
                      state: "unavailable"
                then:
                  - service: script.post_to_hass_agent
                    data:
                      message: "{{ message }}"
                      title: "{{ title }}"
                      filePath: "{{ filePath }}"
                      device: notify.sam
                      duration: "{{ duration }}"
    mode: queued
    max: 10

  # Slack specific Scripts
  post_slack_notification:
    alias: Post Slack Message
    icon: mdi:message-reply
    description: "Post a text message to Slack. Please use a send script to
    decouple from the messaging platform."
    fields:
      message:
        description: Message to post
        required: true
      title:
        description: (optional)Title to the message posted.
      people:
        description: (optional)Slack user ID to message.
        example: "<@ABCDEFG>"
      target:
        description: Slack channel to post the message to without the hash symbol.
        required: true
        example: "general"
    sequence:
      - choose:
        # Check a title was set
        - conditions:
            - condition: template
              value_template: "{{ title is not none }}"
          sequence:
            - service: notify.danny_tsang
              data:
                message: >-
                  {{ iif(people is not none,people|default('', true)~' ','') }}
                  {{ message|replace('Home Assistant', states('input_text.home_assistant_bots_slack_id')) }}
                target: "{{ target }}"
                data:
                  blocks:
                    - type: header
                      text:
                        type: "plain_text"
                        text: "{{ title }}"
                        emoji: true
                    - type: section
                      text:
                        type: mrkdwn
                        text: >-
                          {{ iif(people is not none,people|default('', true)~' ','') }}
                          {{ message|replace('Home Assistant', states('input_text.home_assistant_bots_slack_id')) }}
        default:
          - service: notify.danny_tsang
            data:
              message: >-
                {{ iif(people is not none,people|default('', true)~' ','') }}
                {{ message }}
              target: "{{ target }}"
              data:
                blocks:
                - type: section
                  text:
                    type: mrkdwn
                    text: >-
                      {{ iif(people is not none,people|default('', true)~' ','') }}
                      {{ message|replace('Home Assistant', states('input_text.home_assistant_bots_slack_id')) }}
        continue_on_error: true
    mode: queued
    max: 10
  post_to_slack_with_url_attachment:
    alias: "Post To Slack Home Log With File Or URL Attachments"
    icon: mdi:message-image
    description: >-
      Post a message with a file or URL attachment to the home_log
      channel. Only a file or URL can be set. Not both or neither. Please use a
      send script to decouple from the messaging platform."
    fields:
      message:
        description: Message to post
        required: true
      title:
        description: (optional)Title to the message posted.
      target:
        description: Slack channel to post the message to without the hash symbol.
        required: true
        example: "general"
      people:
        description: (optional)Slack user ID to message.
        example: "<@ABCDEFG>"
      url:
        description: Link to file.
        example: "https://picsum.photos/200/300"
    sequence:
      # Check if a title has been set
      - choose:
          # Check at least filePath or url is set.
          - conditions:
              - condition: template
                value_template: "{{ title is not none }}"
            sequence:
              - service: notify.danny_tsang
                data:
                  message: "{{ message|replace('Home Assistant', states('input_text.home_assistant_bots_slack_id')) }}"
                  title: "{{ title|default('', true) }}"
                  target: "{{ target }}"
                  data:
                    blocks:
                      - type: header
                        text:
                          type: "plain_text"
                          text: "{{ title }}"
                          emoji: true
                      - type: section
                        text:
                          type: mrkdwn
                          text: >-
                            {{ iif(people is not none,people|default('', true)~' ','') }}
                            {{ message|replace('Home Assistant', states('input_text.home_assistant_bots_slack_id')) }}
                        accessory:
                          type: image
                          image_url: "{{ url }}"
                          alt_text: "{{ title|default('Failed to load image', true) }}"
        # No title set
        default:
          - service: notify.danny_tsang
            data:
              message: >-
                {{ iif(people is not none,people|default('', true)~' ','') }}
                {{ message|replace('Home Assistant', states('input_text.home_assistant_bots_slack_id')) }}
              title: "{{ title|default('', true) }}"
              target: "{{ target }}"
              data:
                blocks:
                  - type: section
                    text:
                      type: mrkdwn
                      text: "{{ message|replace('Home Assistant', states('input_text.home_assistant_bots_slack_id')) }}"
                    accessory:
                      type: image
                      image_url: "{{ url }}"
                      alt_text: "{{ title|default('Failed to load image', true) }}"
        continue_on_error: true
    mode: queued
    max: 10
  post_to_slack_with_local_attachments:
    alias: "Post To Slack Home Log With File Or URL Attachments"
    icon: mdi:message-image
    description: >-
      Post a message with a file or URL attachment to the home_log
      channel. Only a file or URL can be set. Not both or neither. Please use a
      send script to decouple from the messaging platform.
    fields:
      message:
        description: Message to post
        required: true
      title:
        description: (optional)Title to the message posted.
      target:
        description: Slack channel to post the message to without the hash symbol.
        required: true
        example: "general"
      people:
        description: (optional)Slack user ID to message.
        example: "<@ABCDEFG>"
      filePath:
        description: File path to attach to post.
        required: true
    sequence:
      - service: notify.danny_tsang
        data:
          message: >-
            {{ iif(people is not none,people|default('', true)~' ','') }}
            {{ message|replace('Home Assistant', states('input_text.home_assistant_bots_slack_id')) }}
          title: "{{ title|default('', true) }}"
          target: "{{ target }}"
          data:
            file:
              path: "{{ filePath }}"
        continue_on_error: true
    mode: queued
    max: 10
  # Telegram specific Scripts
  post_telegram_direct_notification:
    alias: "Send Telegram Direct Message"
    icon: mdi:message-reply-text
    description: >-
      Post a direct text message to adults in the house. Please use
      a send script to decouple from the messaging platform.
    max: 10
    mode: queued
    fields:
      message:
        description: Message to post
        required: true
      title:
        description: Title of post
      people:
        description: Person to send the message to.
          If not specified then it goes to everyone.
        example: "['person.danny'] or ['person.danny','person.terina']"
    sequence:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ 'person.danny' in people }}"
            sequence:
              - service: telegram_bot.send_message
                data:
                  message: "{{ message }}"
                  title: "{{ title|default('', true) }}"
                  target: "{{ states('input_text.dannys_telegram_chat_id') }}"
                continue_on_error: true
        default:
          - service: telegram_bot.send_message
            data:
              message: "{{ message }}"
              title: "{{ title|default('', true) }}"
              target: "{{ states('input_text.dannys_telegram_chat_id') }}"
            continue_on_error: true
  post_to_telegram_home_log_with_local_attachments:
    alias: "Post To Telegram With Local Attachments"
    icon: mdi:message-reply-text
    description: "Post a message with a file attachment to the home_log channel.
    Please use a send script to decouple from the messaging platform."
    fields:
      message:
        description: Message to post
        required: true
      title:
        description: (optional)Title to the message posted.
      filePath:
        description: File path to attach to post.
        required: true
    sequence:
      - service: notify.danny_tsang
        data:
          message: "{{ message }}"
          title: "{{ title|default('', true) }}"
          file: "{{ filePath }}"
        continue_on_error: true
    mode: queued
    max: 10
  # Discord specific Scripts
  post_discord_notification:
    alias: Post Discord Message
    icon: mdi:message-reply
    description: >-
      Post a text message to Discord. Please use a send script to
      decouple from the messaging platform.
    fields:
      message:
        description: Message to post
        required: true
      title:
        description: (optional)Title to the message posted.
      people:
        description: (optional)Discord user ID to message.
        example: "<@123456>"
      target:
        description: >-
          List of Discord channel or user ID to post the message to.
          If a user is set then they will not be tagged but notified of the post.
        required: true
        example: "['1234', '4567']"
    sequence:
      - choose:
        # Check a title was set
        - conditions:
            - condition: template
              value_template: "{{ title is not none }}"
          sequence:
            - service: notify.home_assistant
              data:
                message: >-
                  **{{ title|default('', true) }}**
                  
                  
                  {{ iif(people is not none,people|default('', true)~' ','') }}
                  {{ message|replace('Home Assistant', '<@'~states('input_text.home_assistants_discord_chat_id')~'>') }}
                target: "{{ target }}"
              continue_on_error: true
        default:
          - service: notify.home_assistant
            data:
              message: >-
                {{ iif(people is not none,people|default('', true)~' ','') }}
                {{ message|replace('Home Assistant', '<@'~states('input_text.home_assistants_discord_chat_id')~'>') }}
              target: "{{ target }}"
            continue_on_error: true
    mode: queued
    max: 10
  post_to_discord_with_url_attachment:
    alias: "Post To Discord a URL Attachments"
    icon: mdi:message-image
    description: >-
      Post a message with a URL attachment. Please use a
      send script to decouple from the messaging platform.
    fields:
      message:
        description: Message to post
        required: true
      title:
        description: (optional)Title to the message posted.
      target:
        description: >-
          List of Discord channel or user ID to post the message to.
          If a user is set then they will not be tagged but notified of the post.
        required: true
        example: "['1234', '4567']"
      url:
        description: Link to file.
        example: "https://picsum.photos/200/300"
    sequence:
      # Check if a title has been set
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ title is not none }}"
            sequence:
              - service: notify.danny_tsang
                data:
                  message: ""
                  target: "{{ target }}"
                  data:
                    embed:
                      title: "{{ title }}"
                      description: "{{ message|replace('Home Assistant', '<@'~states('input_text.home_assistants_discord_chat_id')~'>') }}"
                      image:
                        url: "{{ url }}"
        # No title set
        default:
          - service: notify.danny_tsang
            data:
              message: ""
              target: "{{ target }}"
              data:
                embed:
                  description: "{{ message|replace('Home Assistant', '<@'~states('input_text.home_assistants_discord_chat_id')~'>') }}"
                  image:
                    url: "{{ url }}"
        continue_on_error: true
    mode: queued
    max: 10
  post_to_discord_with_local_attachments:
    alias: "Post To Discord Home Log With File Attachments"
    icon: mdi:message-image
    description: >-
      Post a message with a file attachment to the home_log
      channel. Please use a send script to decouple from the messaging platform.
    fields:
      message:
        description: Message to post
        required: true
      title:
        description: (optional)Title to the message posted.
      people:
        description: (optional)Discord user ID to message.
        example: "<@123456>"
      target:
        description: >-
          List of Discord channel or user ID to post the message to.
          If a user is set then they will not be tagged but notified of the post.
        required: true
        example: "['1234', '4567']"
      filePath:
        description: File path to attach to post.
        required: true
    sequence:
      - choose:
        # Check a title was set
        - conditions:
            - condition: template
              value_template: "{{ title is not none }}"
          sequence:
            - service: notify.home_assistant
              data:
                message: "**{{ title|default('', true) }}**
                \n{{ iif(people is not none,people|default('', true)~' ','') }}{{ message }}"
                target: "{{ target }}"
                data:
                  images:
                    - "{{ filePath }}"
              continue_on_error: true
        default:
          - service: notify.home_assistant
            data:
              message: "{{ iif(people is not none,people|default('', true)~' ','') }}{{ message }}"
              target: "{{ target }}"
              data:
                images:
                  - "{{ filePath }}"
            continue_on_error: true
    mode: queued
    max: 10
  post_to_hass_agent:
    alias: "Post To HASS Agent File Attachments"
    icon: mdi:message-image
    description: >-
      Post notification to a desktop client.
    fields:
      message:
        description: Message to post
        required: true
      title:
        description: (optional)Title to the message posted.
      filePath:
        description: File path to attach to post.
      device:
        description: HASS Agent notify service.
        example: notify.sam
        required: true
      duration:
        description: >
          How long to display the notification in seconds. It will default to 10 seconds if one has not been set.
        default: 10
    sequence:
        - choose:
        # Check a title was set
          - conditions:
              - condition: template
                value_template: "{{ filePath is not none }}"
              - condition: template
                value_template: "{{ title is not none }}"
            sequence:
              - service: "{{ device }}"
                data:
                  message: "{{ message }}"
                  title: "{{ title }}"
                  data:
                    image: "{{ filePath }}"
                    duration: "{{ duration|default(10, true) }}"
          - conditions:
              - condition: template
                value_template: "{{ filePath is not none }}"
              - condition: template
                value_template: "{{ title is none }}"
            sequence:
              - service: "{{ device }}"
                data:
                  message: "{{ message }}"
                  data:
                    image: "{{ filePath }}"
                    duration: "{{ duration|default(10, true) }}"
          - conditions:
              - condition: template
                value_template: "{{ title is not none }}"
            sequence:
              - service: "{{ device }}"
                data:
                  message: "{{ message }}"
                  data:
                    image: "{{ filePath }}"
                    duration: "{{ duration|default(10, true) }}"
          default:
            - service: "{{ device }}"
              data:
                message: "{{ message }}"
                data:
                  duration: "{{ duration|default(10, true) }}"
  # WhatsApp specific Scripts
  post_whatsapp_direct_notification:
    alias: Post WhatsApp Direct Message
    icon: mdi:message-reply-text
    description: >-
      Post a direct text message to adults in the house. Please use
      a send script to decouple from the messaging platform.
    fields:
      message:
        description: Message to post
        required: true
      people:
        description: Person to send the message to. If not specified then it goes to everyone.
        example: "['person.danny'] or ['person.danny','person.terina']"
    sequence:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ 'person.danny' in people }}"
            sequence:
              - service: notify.danny_s_whatsapp
                data:
                  message: "{{ message }}"
                continue_on_error: true
        default:
          - service: notify.danny_s_whatsapp
            data:
              message: "{{ message }}"
            continue_on_error: true
    max: 10
    mode: queued
