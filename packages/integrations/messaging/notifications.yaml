# Created by Danny Tsang <danny@tsang.uk>
# Integration: https://www.home-assistant.io/integrations/slack/
# Integration: https://www.home-assistant.io/integrations/mobile_app/
automation:
  # region Callback router
  - id: "1625924056779"
    alias: Mobile Notification Action Router
    description: ""
    triggers:
      - trigger: event
        event_type: mobile_app_notification_action
        event_data: {}
    conditions: []
    actions:
      - choose:
          - conditions:
              - condition: template
                value_template:
                  "{{ trigger.event.data.action == 'set_bedroom_blinds_30'
                  }}"
              - condition: numeric_state
                entity_id: cover.bedroom_blinds
                attribute: current_position
                above: 30
            sequence:
              - action: script.send_to_home_log
                data:
                  message: "ðŸªŸ Closing bedroom blinds event received."
              - action: cover.set_cover_position
                target:
                  entity_id: cover.bedroom_blinds
                data:
                  position: 30
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.action == 'server_fan_off' }}"
            sequence:
              - action: script.send_to_home_log
                data:
                  message: Turning off server fan event received.
              - action: switch.turn_off
                target:
                  entity_id: switch.server_fan
          - conditions:
              - condition: template
                value_template:
                  "{{ trigger.event.data.action == 'switch_on_office_fan'
                  }}"
            sequence:
              - action: script.send_to_home_log
                data:
                  message: Turning on office fan event received.
              - action: switch.turn_on
                target:
                  entity_id: switch.office_fan
          - conditions:
              - condition: template
                value_template:
                  "{{ trigger.event.data.action == 'switch_on_fridge_freezer'
                  }}"
            sequence:
              - action: script.send_to_home_log
                data:
                  message: Turning on fridge freezer event received.
              - action: switch.turn_on
                target:
                  entity_id: switch.ecoflow_kitchen_plug
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.action == 'switch_on_freezer' }}"
            sequence:
              - action: script.send_to_home_log
                data:
                  message: Turning on freezer event received.
              - action: switch.turn_on
                target:
                  entity_id: switch.freezer
          - conditions:
              - condition: template
                value_template:
                  "{{ trigger.event.data.action == 'guest_mode_arm_alarm_and_turn_off_devices'
                  }}"
            sequence:
              - action: script.send_to_home_log
                data:
                  message: "ðŸ”” Guest mode override. Turning alarm on and devices off."
              - action: script.set_alarm_to_away_mode
              - action: script.lock_front_door
              - action: script.everybody_leave_home
          - conditions:
              - condition: template
                value_template:
                  "{{ trigger.event.data.action == 'guest_mode_arm_alarm_away'
                  }}"
              - condition: state
                entity_id: input_select.home_mode
                state: "Guest"
            sequence:
              - action: script.send_to_home_log
                data:
                  message:
                    "ðŸ”” Guest mode override. Turning alarm in away mode (motion
                    and sensors) on only."
              - action: script.set_alarm_to_away_mode
              - action: script.lock_front_door
          - conditions:
              - condition: template
                value_template:
                  "{{ trigger.event.data.action == 'guest_mode_turn_off_devices'
                  }}"
            sequence:
              - action: script.send_to_home_log
                data:
                  message: Guest mode override. Turning devices off only.
              - action: script.everybody_leave_home
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.action == 'switch_off_alarm' }}"
            sequence:
              - action: script.send_to_home_log
                data:
                  message: Alarm override. Turning Alarm off.
              - action: script.set_alarm_to_disarmed_mode
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.action == 'switch_off_attic_lights' }}"
            sequence:
              - action: script.send_to_home_log
                data:
                  message: Turning attic lights off event.
              - action: light.turn_off
                data: {}
                target:
                  entity_id: light.attic
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.action == 'update_home_assistant' }}"
            sequence:
              - action: script.send_to_home_log
                data:
                  message: Upgrade Home Assistant event.
              - action: update.install
                data:
                  backup: true
                target:
                  entity_id: update.home_assistant_core_update
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.action == 'zappi_stop' }}"
            sequence:
              - action: script.send_to_home_log
                data:
                  message: Stop Zappi event.
              - action: select.select_option
                data:
                  option: Stopped
                target:
                  entity_id: select.myenergi_zappi_charge_mode
        default: []
    mode: queued
    max: 10

script:
  # region Encapsulated scripts
  send_to_home_log:
    alias: Send To Home Log
    icon: mdi:message-outline
    description: "Post a text message to the home_log channel."
    # https://github.com/home-assistant/frontend/issues/8591
    fields:
      message:
        description: Message to post.
        required: true
        selector:
          text:
            multiline: true
      title:
        description: (optional)Title to the message posted.
        selector:
          text:
      log_level:
        description: Level of logging. If it matches or high level, then it will be sent.
        example: >-
          If logging is set to *Normal* and the current logging level is *Debug*, then it
          will be sent to the chosen home log platforms.
        default: "Debug"
        selector:
          select:
            options:
              - Normal
              - Debug
    sequence:
      - if:
          - not:
              - condition: state
                entity_id: input_select.home_log_level
                state: "Off"
          - condition: template
            value_template: "{{ log_level|default(none, true) is none or log_level == states('input_select.home_log_level') }}"
        then:
          - if:
            - condition: template
              value_template: "{{ 'Slack' in states('input_text.home_log_platforms') }}"
            then:
              - action: script.post_slack_notification
                data:
                  message: "{{ message }}"
                  title: "{{ title|default(none, true) }}"
                  target: "{{ states('input_text.slack_home_log_channel_id') }}"
                continue_on_error: true
          - if:
            - condition: template
              value_template: "{{ 'Discord' in states('input_text.home_log_platforms') }}"
            then:
              - action: script.post_discord_notification
                data:
                  message: "{{ message }}"
                  title: "{{ title|default(none, true) }}"
                  target: "{{ states('input_text.discord_home_log_channel_id') }}"
                continue_on_error: true
    mode: queued
    max: 10
  send_direct_notification:
    alias: Send Direct Message To a Person
    icon: mdi:message-outline
    description: "Send a direct text message to adults in the house."
    fields:
      message:
        description: Message to post
        required: true
        selector:
          text:
            multiline: true
      title:
        description: Title to post
        selector:
          text:
      people:
        description:
          (optional)People to message using people entity in a comma separated list.
          If no one is specified, it will go to everyone.
        example: "['person.danny'] or ['person.danny','person.terina']"
        selector:
          target:
            entity:
              domain:
                - person
      priority:
        description: "normal | high | critical (mobile supports critical)"
        example: "normal"
        selector:
          select:
            options:
              - normal
              - high
              - critical
      suppress_if_quiet:
        description: "If quiet hours are on, avoid push; fall back to persistent"
        default: true
        example: "true"
        selector:
          boolean:
    sequence:
      - alias: Set defaults
        variables:
          v_priority: "{{ (priority | default('normal')) }}"
          v_suppress_if_quiet: "{{ (suppress_if_quiet | default(true)) }}"
      - if:
          - or:
              - alias: "Quiet time is OFF"
                condition: state
                entity_id: schedule.notification_quiet_time
                state: "off"

              - alias: "Quiet time is ON and suppress_if_quiet is FALSE"
                and:
                  - condition: state
                    entity_id: schedule.notification_quiet_time
                    state: "on"
                  - condition: template
                    value_template: "{{ not v_suppress_if_quiet }}"

              - alias: "Quiet time is ON and priority is NOT 'normal'"
                and:
                  - condition: state
                    entity_id: schedule.notification_quiet_time
                    state: "on"
                  - condition: template
                    value_template: "{{ v_priority != 'normal' }}"
        then:
          - variables:
              persons: >-
                {{ people|default(namespace(entity_id=['person.danny', 'person.terina', 'person.leo', 'person.ashlee']), true) }}
              # Get people's preferred messaging platform
              slack: >-
                {% from 'get_preferred_direct_message_platform.jinja' import preferred_direct_message_platform %}
                {{ preferred_direct_message_platform(states('input_text.direct_message_list') if persons.entity_id|default('', true)|length == 0  else persons.entity_id, 'Slack') }}
              discord: >-
                {% from 'get_preferred_direct_message_platform.jinja' import preferred_direct_message_platform %}
                {{ preferred_direct_message_platform(states('input_text.direct_message_list') if persons.entity_id|default('', true)|length == 0  else persons.entity_id, 'Discord') }}
              mobile: >-
                {% from 'get_preferred_direct_message_platform.jinja' import preferred_direct_message_platform %}
                {{ preferred_direct_message_platform(states('input_text.direct_message_list') if persons.entity_id|default('', true)|length == 0  else persons.entity_id, 'Mobile') }}
              telegram: >-
                {% from 'get_preferred_direct_message_platform.jinja' import preferred_direct_message_platform %}
                {{ preferred_direct_message_platform(states('input_text.direct_message_list') if persons.entity_id|default('', true)|length == 0  else persons.entity_id, 'Telegram') }}
              whatsapp: >-
                {% from 'get_preferred_direct_message_platform.jinja' import preferred_direct_message_platform %}
                {{ preferred_direct_message_platform(states('input_text.direct_message_list') if persons.entity_id|default('', true)|length == 0  else persons.entity_id, 'WhatsApp') }}
          - action: script.send_to_home_log
            data:
              message: "{{ message }}"
              title: "{{ title|default(none, true) }}"
          # Check if notifications is turned on.
          - if:
              - condition: state
                entity_id: input_boolean.enable_direct_notifications
                state: "on"
            then:
              # Check anyone has set Slack for their direct messages
              - if:
                  - condition: template
                    value_template: "{{ slack|default('', true)|length > 0 }}"
                then:
                  - action: script.post_slack_notification
                    data:
                      message: "{{ message }}"
                      title: "{{ title|default(none, true) }}"
                      target: "{{ states('input_text.slack_direct_notification_channel_id') }}"
                      people: "{{ slack|join(' ')|replace('person.danny', '<@'~states('input_text.dannys_slack_id')~'>')
                      |replace('person.terina', '<@'~states('input_text.terinas_slack_id')~'>')
                      |replace('person.leo', '<@'~states('input_text.leos_slack_id')~'>') }}"
                    continue_on_error: true
              - if:
                  - condition: template
                    value_template: "{{ discord|default('', true)|length > 0 }}"
                then:
                  - action: script.post_discord_notification
                    data:
                      message: "{{ message }}"
                      title: "{{ title|default(none, true) }}"
                      target: "{{ states('input_text.discord_direct_notification_channel_id') }}"
                      people: "{{ discord|join(' ')
                        |replace('person.danny', '<@'~states('input_text.dannys_discord_chat_id')~'>')
                        |replace('person.terina', '<@'~states('input_text.terinas_discord_chat_id')~'>')
                        |replace('person.leo', '<@'~states('input_text.leos_discord_chat_id')~'>')
                        |replace('person.ashlee', '<@'~states('input_text.ashlees_discord_chat_id')~'>') }}"
                    continue_on_error: true
              - repeat:
                  for_each: "{{ mobile|default([], true) }}"
                  sequence:
                    - action: script.post_home_assistant_direct_notification
                      data:
                        message: "{{ message }}"
                        title: "{{ title|default(none, true) }}"
                        people: "{{ repeat.item }}"
                      continue_on_error: true
              - repeat:
                  for_each: "{{ telegram|default([], true) }}"
                  sequence:
                    - action: script.post_telegram_direct_notification
                      data:
                        message: "{{ message }}"
                        title: "{{ title|default(none, true) }}"
                        people: "{{ repeat.item }}"
                      continue_on_error: true
              - repeat:
                  for_each: "{{ whatsapp|default([], true) }}"
                  sequence:
                    - action: script.post_whatsapp_direct_notification
                      data:
                        message: "{{ message }}"
                        title: "{{ title }}"
                        people: "{{ repeat.item }}"
                      continue_on_error: true
    mode: queued
    max: 10
  send_direct_notification_with_url:
    alias: Send Direct Message To a Person With A Link
    icon: mdi:message-outline
    description: "Send a direct text message to people with a URL."
    fields:
      message:
        description: Message to post
        required: true
        selector:
          text:
            multiline: true
      title:
        description: Title to post
        selector:
          text:
      people:
        description:
          (optional)People to message using people entity in a comma separated list.
          If no one is specified, it will go to everyone.
        example: "['person.danny'] or ['person.danny','person.terina']"
        selector:
          target:
            entity:
              domain:
                - person
      url:
        description: (optional)Link to file.
        required: true
        selector:
          text:
            type: "url"
      url_type:
        description: The type of resource the URL refers to.
        example: image
        required: true
        selector:
          select:
            options:
              - audio
              - image
              - video
              - web
    variables:
      # Get people's preferred messaging platform
      slack: >-
        {% from 'get_preferred_direct_message_platform.jinja' import preferred_direct_message_platform %}
        {{ preferred_direct_message_platform(states('input_text.direct_message_list') if people.entity_id|default('', true)|length == 0  else people, 'Slack') }}
      discord: >-
        {% from 'get_preferred_direct_message_platform.jinja' import preferred_direct_message_platform %}
        {{ preferred_direct_message_platform(states('input_text.direct_message_list') if people.entity_id|default('', true)|length == 0  else people, 'Discord') }}
      mobile: >-
        {% from 'get_preferred_direct_message_platform.jinja' import preferred_direct_message_platform %}
        {{ preferred_direct_message_platform(states('input_text.direct_message_list') if people.entity_id|default('', true)|length == 0  else people, 'Mobile') }}
      telegram: >-
        {% from 'get_preferred_direct_message_platform.jinja' import preferred_direct_message_platform %}
        {{ preferred_direct_message_platform(states('input_text.direct_message_list') if people.entity_id|default('', true)|length == 0  else people, 'Telegram') }}
      whatsapp: >-
        {% from 'get_preferred_direct_message_platform.jinja' import preferred_direct_message_platform %}
        {{ preferred_direct_message_platform(states('input_text.direct_message_list') if people.entity_id|default('', true)|length == 0  else people, 'WhatsApp') }}
    sequence:
      - action: script.send_to_home_log
        data:
          message: "{{ message }}"
          title: "{{ title|default(none, true) }}"
      # Check if notifications is turned on.
      - if:
          - condition: state
            entity_id: input_boolean.enable_direct_notifications
            state: "on"
        then:
          # Check anyone has set Slack for their direct messages
          - if:
              - condition: template
                value_template: "{{ slack|default('', true)|length > 0 }}"
            then:
              - action: script.post_to_slack_with_url_attachment
                data:
                  message: "{{ message }}"
                  title: "{{ title|default(none, true) }}"
                  target: "{{ states('input_text.slack_direct_notification_channel_id') }}"
                  people: "{{ slack|join(' ')|replace('person.danny', states('input_text.dannys_slack_id'))
                  |replace('person.terina', states('input_text.terinas_slack_id'))
                  |replace('person.leo', states('input_text.leos_slack_id')) }}"
                continue_on_error: true
          - if:
              - condition: template
                value_template: "{{ discord|default('', true)|length > 0 }}"
            then:
              - action: script.post_discord_notification
                data:
                  message: >-
                    {{ message }}


                    {{ url }}
                  title: "{{ title|default(none, true) }}"
                  target: "{{ states('input_text.discord_direct_notification_channel_id') }}"
                  people: "{{ discord|join(' ')|replace('person.danny', '<@'~states('input_text.dannys_discord_chat_id')~'>')
                    |replace('person.terina', '<@'~states('input_text.terinas_discord_chat_id')~'>')
                    |replace('person.leo', '<@'~states('input_text.leos_discord_chat_id')~'>') }}"
                continue_on_error: true
          - repeat:
              for_each: "{{ mobile|default([], true) }}"
              sequence:
                - action: script.post_home_assistant_direct_notification
                  data:
                    message: "{{ message }}"
                    title: "{{ title|default(none, true) }}"
                    people: "{{ repeat.item }}"
                    data:
                      image: "{{ url }}"
                  continue_on_error: true
          - repeat:
              for_each: "{{ telegram|default([], true) }}"
              sequence:
                - action: script.post_telegram_direct_notification
                  data:
                    message: >-
                      {{ message }}
                      {{ url }}
                    title: "{{ title|default(none, true) }}"
                    target: "{{ states('input_text.telegram_direct_notification_channel_id') }}"
                    people: "{{ repeat.item }}"
                  continue_on_error: true
          - repeat:
              for_each: "{{ whatsapp|default([], true) }}"
              sequence:
                - action: script.post_whatsapp_direct_notification
                  data:
                    message: >-
                      {{ message }}


                      {{ url }}
                    title: "{{ title }}"
                    people: "{{ repeat.item }}"
                  continue_on_error: true
    mode: queued
    max: 10
  # region Home log
  send_home_log_with_local_attachments:
    alias: Send To Home Log With Local Attachments
    icon: mdi:message-image-outline
    description: "Post a message with a file attachment to the home_log channel."
    fields:
      message:
        description: Message to post
        required: true
        selector:
          text:
            multiline: true
      title:
        description: (optional)Title to the message posted.
        selector:
          text:
      filePath:
        description: File path to attach to post.
        required: true
        example: "/config/www/myImage.jpg"
        selector:
          text:
            type: "url"
      people:
        description:
          (optional)People to message using people entity in a comma separated list.
          If no one is specified, it will be posted to the home log.
        example: "['person.danny'] or ['person.danny','person.terina']"
        selector:
          target:
            entity:
              domain:
                - person
    variables:
      # Get people's preferred messaging platform
      slack: >-
        {% from 'get_preferred_direct_message_platform.jinja' import preferred_direct_message_platform %}
        {{ preferred_direct_message_platform(states('input_text.direct_message_list') if people|default('', true)|length == 0 else people, 'Slack') }}
      discord: >-
        {% from 'get_preferred_direct_message_platform.jinja' import preferred_direct_message_platform %}
        {{ preferred_direct_message_platform(states('input_text.direct_message_list') if people|default('', true)|length == 0 else people, 'Discord') }}
      mobile: >-
        {% from 'get_preferred_direct_message_platform.jinja' import preferred_direct_message_platform %}
        {{ preferred_direct_message_platform(states('input_text.direct_message_list') if people|default('', true)|length == 0 else people, 'Mobile') }}
      telegram: >-
        {% from 'get_preferred_direct_message_platform.jinja' import preferred_direct_message_platform %}
        {{ preferred_direct_message_platform(states('input_text.direct_message_list') if people|default('', true)|length == 0 else people, 'Telegram') }}
    sequence:
      - parallel:
          - if:
              - not:
                  - condition: state
                    entity_id: input_select.home_log_level
                    state: "Off"
            then:
              - parallel:
                  - action: script.post_to_slack_with_local_attachments
                    data:
                      message: "{{ message }}"
                      title: "{{ title|default(none, true) }}"
                      target: "{{ states('input_text.slack_home_log_channel_id') }}"
                      filePath: "{{ filePath }}"
                    continue_on_error: true
                  - action: script.post_to_discord_with_local_attachments
                    data:
                      message: "{{ message }}"
                      title: "{{ title|default(none, true) }}"
                      target: "{{ states('input_text.discord_home_log_channel_id') }}"
                      filePath: "{{ filePath }}"
                    continue_on_error: true
          # Check if people parameter has been set before checking which platform to send file attachments.
          - if:
              - condition: template
                value_template: "{{ people|default('', true)|length > 0 }}"
              - condition: state
                entity_id: input_boolean.enable_direct_notifications
                state: "on"
            then:
              - if:
                  - condition: template
                    value_template: "{{ slack|default('', true)|length > 0 }}"
                then:
                  - action: script.post_to_slack_with_local_attachments
                    data:
                      message: "{{ message }}"
                      title: "{{ title|default(none, true) }}"
                      target: "{{ states('input_text.slack_direct_notification_channel_id') }}"
                      people: "{{ slack|join(' ')|replace('person.danny', '<@'~states('input_text.dannys_slack_id')~'>')
                      |replace('person.terina', '<@'~states('input_text.terinas_slack_id')~'>')
                      |replace('person.leo', '<@'~states('input_text.leos_slack_id')~'>') }}"
                      filePath: "{{ filePath }}"
                    continue_on_error: true
              - if:
                  - condition: template
                    value_template: "{{ discord|default('', true)|length > 0 }}"
                then:
                  - action: script.post_to_discord_with_local_attachments
                    data:
                      message: "{{ message }}"
                      title: "{{ title|default(none, true) }}"
                      target: "{{ states('input_text.discord_direct_notification_channel_id') }}"
                      people: "{{ discord|join(' ')|replace('person.danny', '<@'~states('input_text.dannys_discord_chat_id')~'>')
                      |replace('person.terina', '<@'~states('input_text.terinas_discord_chat_id')~'>')
                      |replace('person.leo', '<@'~states('input_text.leos_discord_chat_id')~'>') }}"
                      filePath: "{{ filePath }}"
                    continue_on_error: true
              - repeat:
                  for_each: "{{ telegram|default([], true) }}"
                  sequence:
                    - action: script.post_to_discord_with_local_attachments
                      data:
                        message: "{{ message }}"
                        title: "{{ title|default(none, true) }}"
                        target: "{{ states('input_text.slack_direct_notification_channel_id') }}"
                        people: "{{ repeat.item }}"
                        filePath: "{{ filePath }}"
                      continue_on_error: true
    mode: queued
    max: 10
  send_home_log_with_url:
    alias: Send To Home Log With URL
    icon: mdi:message-bookmark-outline
    description: "Post a message with a URL to the home_log channel."
    fields:
      message:
        description: Message to post
        required: true
        selector:
          text:
            multiline: true
      title:
        description: (optional)Title to the message posted.
        selector:
          text:
      url:
        description: (optional)Link to file.
        required: true
        selector:
          text:
            type: "url"
    sequence:
      - if:
          - not:
              - condition: state
                entity_id: input_select.home_log_level
                state: "Off"
        then:
          - parallel:
              - action: script.post_to_slack_with_url_attachment
                data:
                  message: "{{ message }}"
                  title: "{{ title|default(none, true) }}"
                  target: "{{ states('input_text.slack_home_log_channel_id') }}"
                  url: "{{ url }}"
              - action: script.post_to_discord_with_url_attachment
                data:
                  message: "{{ message }}"
                  title: "{{ title|default(none, true) }}"
                  target: "{{ states('input_text.discord_home_log_channel_id') }}"
                  url: "{{ url }}"
    mode: queued
    max: 10
  # region Actionable notifications
  send_actionable_notification_with_2_buttons:
    alias: Send Actionable Notification With 2 Buttons
    icon: mdi:message-draw
    fields:
      message:
        description: Message to post
        required: true
        selector:
          text:
            multiline: true
      title:
        description: (optional)Title to the message posted.
        selector:
          text:
      people:
        description: People to message.
        example: "['person.danny'] or ['person.danny','person.terina']"
        required: true
        selector:
          target:
            entity:
              domain:
                - person
      action1_title:
        description: First action text.
        required: true
        selector:
          text:
      action1_name:
        description: First vent name if action is selected.
        required: true
        selector:
          text:
      action2_title:
        description: Second action text.
        required: true
        selector:
          text:
      action2_name:
        description: Second event name if action is selected.
        required: true
        selector:
          text:
    variables:
      # Get people's preferred messaging platform
      mobile: >-
        {% from 'get_preferred_direct_message_platform.jinja' import preferred_direct_message_platform %}
        {{ preferred_direct_message_platform(states('input_text.direct_message_list') if people.entity_id|default('', true)|length == 0  else people, 'Mobile') }}
      telegram: >-
        {% from 'get_preferred_direct_message_platform.jinja' import preferred_direct_message_platform %}
        {{ preferred_direct_message_platform(states('input_text.direct_message_list') if people.entity_id|default('', true)|length == 0  else people, 'Telegram') }}
    sequence:
      - if:
          - condition: state
            entity_id: input_boolean.enable_direct_notifications
            state: "on"
        then:
          - repeat:
              # for_each: "{{ mobile|default([], true) }}"
              for_each: "{{ people.entity_id|default([], true) }}"
              sequence:
                - choose:
                    - conditions:
                      - condition: template
                        value_template: "{{ repeat.item == 'person.danny' }}"
                      sequence:
                        - action: notify.mobile_app_top_dog
                          data:
                            message: "{{ message }}"
                            title: "{{ title|default('', true) }}"
                            data:
                              actions:
                                - title: "{{ action1_title }}"
                                  action: "{{ action1_name }}"
                                - title: "{{ action2_title }}"
                                  action: "{{ action2_name }}"
                    - conditions:
                      - condition: template
                        value_template: "{{ repeat.item == 'person.terina' }}"
                      sequence:
                        - action: notify.mobile_app_oneplus_10
                          data:
                            message: "{{ message }}"
                            title: "{{ title|default('', true) }}"
                            data:
                              actions:
                                - title: "{{ action1_title }}"
                                  action: "{{ action1_name }}"
                                - title: "{{ action2_title }}"
                                  action: "{{ action2_name }}"
                    - conditions:
                      - condition: template
                        value_template: "{{ repeat.item == 'person.leo' }}"
                      sequence:
                        - action: notify.mobile_app_ipad_air_4th_generation_6730
                          data:
                            message: "{{ message }}"
                            title: "{{ title|default('', true) }}"
                            data:
                              actions:
                                - title: "{{ action1_title }}"
                                  action: "{{ action1_name }}"
                                - title: "{{ action2_title }}"
                                  action: "{{ action2_name }}"
          - repeat:
              for_each: "{{ telegram|default([], true) }}"
              sequence:
                - action: script.post_telegram_direct_notification
                  data:
                    message: "{{ message }}"
                    title: "{{ title|default(none, true) }}"
                    people: "{{ repeat.item }}"
    mode: queued
    max: 10
  send_actionable_notification_with_3_buttons:
    alias: Send Actionable Notification With 3 Buttons
    icon: mdi:message-draw
    fields:
      message:
        description: Message to post
        required: true
        selector:
          text:
            multiline: true
      title:
        description: (optional)Title to the message posted.
        selector:
          text:
      people:
        description: People to message.
        example: "['person.danny'] or ['person.danny','person.terina']"
        required: true
        selector:
          target:
            entity:
              domain:
                - person
      action1_title:
        description: First action text.
        selector:
          text:
      action1_name:
        description: First vent name if action is selected.
        required: true
        selector:
          text:
      action2_title:
        description: Second action text.
        required: true
        selector:
          text:
      action2_name:
        description: Second event name if action is selected.
        required: true
        selector:
          text:
      action3_title:
        description: Third action text.
        required: true
        selector:
          text:
      action3_name:
        description: Third event name if action is selected.
        required: true
        selector:
          text:
    variables:
      # Get people's preferred messaging platform
      mobile: >-
        {% from 'get_preferred_direct_message_platform.jinja' import preferred_direct_message_platform %}
        {{ preferred_direct_message_platform(states('input_text.direct_message_list') if people.entity_id|default('', true)|length == 0  else people, 'Mobile') }}
      telegram: >-
        {% from 'get_preferred_direct_message_platform.jinja' import preferred_direct_message_platform %}
        {{ preferred_direct_message_platform(states('input_text.direct_message_list') if people.entity_id|default('', true)|length == 0  else people, 'Telegram') }}
    sequence:
      - if:
          - condition: state
            entity_id: input_boolean.enable_direct_notifications
            state: "on"
        then:
          - repeat:
              for_each: "{{ mobile|default([], true) }}"
              sequence:
                - choose:
                    - conditions:
                      - condition: template
                        value_template: "{{ repeat.item == 'person.danny' }}"
                      sequence:
                        - action: notify.mobile_app_top_dog
                          data:
                            message: "{{ message }}"
                            title: "{{ title|default('', true) }}"
                            data:
                              actions:
                                - title: "{{ action1_title }}"
                                  action: "{{ action1_name }}"
                                - title: "{{ action2_title }}"
                                  action: "{{ action2_name }}"
                                - title: "{{ action3_title }}"
                                  action: "{{ action3_name }}"
                    - conditions:
                      - condition: template
                        value_template: "{{ repeat.item == 'person.terina' }}"
                      sequence:
                        - action: notify.mobile_app_oneplus_10
                          data:
                            message: "{{ message }}"
                            title: "{{ title|default('', true) }}"
                            data:
                              actions:
                                - title: "{{ action1_title }}"
                                  action: "{{ action1_name }}"
                                - title: "{{ action2_title }}"
                                  action: "{{ action2_name }}"
                                - title: "{{ action3_title }}"
                                  action: "{{ action3_name }}"
                    - conditions:
                      - condition: template
                        value_template: "{{ repeat.item == 'person.leo' }}"
                      sequence:
                        - action: notify.mobile_app_ipad_air_4th_generation_6730
                          data:
                            message: "{{ message }}"
                            title: "{{ title|default('', true) }}"
                            data:
                              actions:
                                - title: "{{ action1_title }}"
                                  action: "{{ action1_name }}"
                                - title: "{{ action2_title }}"
                                  action: "{{ action2_name }}"
                                - title: "{{ action3_title }}"
                                  action: "{{ action3_name }}"
          - action: script.send_actionable_notification_with_3_buttons
            data:
              message: "{{ message }}"
              title: "{{ title|default(none, true) }}"
              people: "{{ people }}"
              data:
                action1_title: "{{ action1_title }}"
                action1_name: "{{ action1_name }}"
                action2_title: "{{ action2_title }}"
                action2_name: "{{ action2_name }}"
                action3_title: "{{ action3_title }}"
                action3_name: "{{ action3_name }}"
          - repeat:
              for_each: "{{ telegram|default([], true) }}"
              sequence:
                - action: script.post_telegram_direct_notification
                  data:
                    message: "{{ message }}"
                    title: "{{ title|default(none, true) }}"
                    people: "{{ repeat.item }}"
    mode: single
  # region Computer Notifications
  post_to_hass_agent:
    alias: "Post To HASS Agent File Attachments"
    icon: mdi:message-image
    description: >-
      Post notification to a desktop client.
    fields:
      message:
        description: Message to post
        required: true
        selector:
          text:
            multiline: true
      title:
        description: (optional)Title to the message posted.
        selector:
          text:
      filePath:
        description: File path to attach to post.
        selector:
          text:
      device:
        description: HASS Agent notify service.
        example: notify.sam
        required: true
        selector:
          target:
            entity:
              domain:
                - notify
      duration:
        description: >
          How long to display the notification in seconds. It will default to 10 seconds if one has not been set.
        default: 10
        selector:
          number:
            min: 1
            max: 300
            step: 1
            unit_of_measurement: "sec"
            mode: "box"
    sequence:
        - choose:
        # Check a title was set
          - conditions:
              - condition: template
                value_template: "{{ filePath is not none }}"
              - condition: template
                value_template: "{{ title is not none }}"
            sequence:
              - action: "{{ device }}"
                data:
                  message: "{{ message }}"
                  title: "{{ title }}"
                  data:
                    image: "{{ filePath }}"
                    duration: "{{ duration|default(10, true) }}"
          - conditions:
              - condition: template
                value_template: "{{ filePath is not none }}"
              - condition: template
                value_template: "{{ title is none }}"
            sequence:
              - action: "{{ device }}"
                data:
                  message: "{{ message }}"
                  data:
                    image: "{{ filePath }}"
                    duration: "{{ duration|default(10, true) }}"
          - conditions:
              - condition: template
                value_template: "{{ title is not none }}"
            sequence:
              - action: "{{ device }}"
                data:
                  message: "{{ message }}"
                  data:
                    image: "{{ filePath }}"
                    duration: "{{ duration|default(10, true) }}"
          default:
            - action: "{{ device }}"
              data:
                message: "{{ message }}"
                data:
                  duration: "{{ duration|default(10, true) }}"
  # region Speakers
  announce_delayed_notifications:
    alias: "Announce Delayed Notifications"
    fields:
      test:
        default: false
      people:
        description:
          (optional)People to message using people entity in a comma separated list.
          If no one is specified, it will go to everyone.
        example: "['person.danny'] or ['person.danny','person.terina']"
        selector:
          target:
            entity:
              domain:
                - person
    sequence:
      - action: todo.get_items
        target:
          entity_id:
            - todo.shared_notifications
            - todo.dannys_notifications
        data:
          status: needs_action
        response_variable: todo_list
      - variables:
          shared: >-
            {%- for item in todo_list['todo.shared_notifications']['items'] %}
              * {{ item.summary }}


            {%- endfor %}
      - choose:
        - alias: Danny
          conditions:
            - condition: template
              value_template: "{{ people.entity_id|default('', true) in 'person.danny' }}"
            - or:
                - condition: template
                  value_template: "{{ todo_list['todo.dannys_notifications']['items']|default([], true)|count > 0 }}"
                - condition: template
                  value_template: "{{ todo_list['todo.shared_notifications']['items']|default([], true)|count > 0 }}"
          sequence:
            - alias: Deliver announcement
              action: script.send_direct_notification
              data:
                message: >-
                  Please be aware of the follow:
                  {%- for item in todo_list['todo.dannys_notifications']['items'] %}
                  * {{ item.summary }}


                  {% endfor %}

                  Shared:

                  {{ shared }}
                title: "Delayed Announcements"
                people:
                  entity_id:
                    - person.danny
            - if:
                - condition: template
                  value_template: "{{ test|default(false, true) == false }}"
              then:
                - alias: Mark stored announcements as complete
                  repeat:
                    for_each: "{{ todo_list['todo.dannys_notifications']['items'] }}"
                    sequence:
                      - action: todo.update_item
                        target:
                          entity_id:
                            - todo.dannys_notifications
                        data:
                          item: "{{ repeat.item.summary }}"
                          status: completed
        default: []
      - if:
          - condition: template
            value_template: "{{ test|default(false, true) == false }}"
        then:
          - alias: Mark stored announcements as complete
            repeat:
              for_each: "{{ todo_list['todo.shared_notifications']['items'] }}"
              sequence:
                - action: todo.update_item
                  target:
                    entity_id:
                      - todo.shared_notifications
                  data:
                    item: "{{ repeat.item.summary }}"
                    status: completed
  notification_persistent_indicator_manager:
    alias: "Notification Persistent Indicator Manager"
    description: "Manage notifications which stay on until a certain condition is met"
    fields:
      add_notification:
        description:
          New notification.
        example: "FRONT DOOR"
        selector:
          select:
            options:
              - FRONT_DOOR_OPEN
      remove_notification:
        description:
          Notification that is no longer applicable.
        example: "FRONT DOOR"
        selector:
          select:
            options:
              - FRONT_DOOR_OPEN
    sequence:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ add_notification in 'FRONT_DOOR_OPEN' }}"
            sequence:
              - action: script.front_door_open_notification
                data: {}
        default: []
