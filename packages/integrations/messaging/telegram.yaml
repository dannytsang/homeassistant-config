# Created by Danny Tsang <danny@tsang.uk>
# Integration: https://www.home-assistant.io/integrations/telegram/
automation:
  - id: "1653739708849"
    alias: "Telegram: Event Received"
    description: ""
    trigger:
      - platform: event
        event_type: telegram_command
    condition: []
    action:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.command == 'get_camera'}}"
            sequence:
              - action: script.send_to_home_log
                data:
                  message: Getting camera {{trigger.event.data.args}}
        default:
          - action: script.send_to_home_log
            data:
              message: |-
                Recieved Telegram event:

                command: {{trigger.event.data.command}}
                args: {{trigger.event.data.args}}
                from_first: {{trigger.event.data.from_first}}
                from_last: {{trigger.event.data.from_last}}
                user_id: {{trigger.event.data.user_id}}
                chat_id: {{trigger.event.data.chat_id}}
                chat: {{trigger.event.data.chat}}
              title: Telegram
              log_level: "Debug"
    mode: queued
    max: 10
  - id: "1653739708850"
    alias: "Telegram: Message Received"
    description: ""
    trigger:
      - platform: event
        event_type: telegram_text
    condition: []
    action:
      - if:
          - condition: template
            value_template: "{{ trigger.event.data.text|default(none, true)  != none }}"
        then:
          - parallel:
              - if:
                  - condition: template
                    value_template: >-
                      {{ assist.response.response_type|default(none, true)  != none and
                      assist.response.response_type == 'error'}}
                then:
                  - action: script.send_to_home_log
                    data:
                      message: |-
                        :speech_balloon: Recieved Telegram event:
                        chat: {{ trigger.event.data.chat }}
                        from_first: {{ trigger.event.data.from_first }}
                        from_last: {{ trigger.event.data.from_last }}
                        user_id: {{ trigger.event.data.user_id }}
                        chat_id: {{ trigger.event.data.chat_id }}
                        text: {{ trigger.event.data.text }}
                      title: Telegram
                      log_level: "Debug"
              - choose:
                  - alias: "Message from Danny"
                    conditions:
                      - condition: template
                        value_template: "{{ trigger.event.data.user_id|string|default('', true)  == states('input_text.dannys_telegram_chat_id') }}"
                    sequence:
                      - action: conversation.process
                        data:
                          agent_id: "{{ states('input_text.dannys_selected_conversation_agent') }}"
                          text: "{{ trigger.event.data.text }}"
                        response_variable: assist
                      - if:
                          - condition: template
                            value_template: >-
                              {{ assist.response.response_type|default(none, true)  != none and
                              assist.response.response_type == 'error'}}
                        then:
                          - parallel:
                            - action: notify.telegram
                              data:
                                message: >-
                                  {%- set wait_response = ['hmm...', 'thinking...', '...', 'er...', 'um...', 'well'] -%}
                                  {{ wait_response[range(0, wait_response|length)|random] }}
                            - action: conversation.process
                              data:
                                agent_id: "{{ states('input_text.dannys_secondary_selected_conversation_agent') }}"
                                text: "{{ trigger.event.data.text }}"
                              response_variable: assist
                      - action: notify.telegram
                        data:
                          message: "{{ assist.response.speech.plain.speech }}"
                default: []
    mode: queued
    max: 10
  - id: "1653739708851"
    alias: "Telegram: Callback Received"
    description: ""
    trigger:
      - platform: event
        event_type: telegram_callback
    condition: []
    action:
      - action: script.send_to_home_log
        data:
          message: |-
            :speech_balloon: Recieved Telegram event:
            data: {{ trigger.event.data.data }}

            message: {{ trigger.event.data.message }}

            from_first: {{ trigger.event.data.from_first }}

            from_last: {{ trigger.event.data.from_last }}

            user_id: {{ trigger.event.data.user_id }}

            id: {{ trigger.event.data.id }}

            chat_id: {{ trigger.event.data.chat_id }}

            text: {{ trigger.event.data.text }}
          title: Telegram
          log_level: "Debug"
    mode: queued
    max: 10

script:
  post_telegram_direct_notification:
    alias: "Send Telegram Direct Message"
    icon: mdi:message-reply-text
    description: >-
      Post a direct text message to adults in the house. Please use
      a send script to decouple from the messaging platform.
    fields:
      message:
        description: Message to post
        required: true
        selector:
          text:
            multiline: true
      title:
        description: Title of post
        selector:
          text:
      people:
        description: Person to send the message to.
          If not specified then it goes to everyone.
        example: "['person.danny'] or ['person.danny','person.terina']"
        selector:
          target:
            entity:
              domain:
                - person
    sequence:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ 'person.danny' in people }}"
            sequence:
              - action: telegram_bot.send_message
                data:
                  message: "{{ message }}"
                  title: "{{ title|default('', true) }}"
                  target: "{{ states('input_text.dannys_telegram_chat_id') }}"
                continue_on_error: true
        default:
          - action: telegram_bot.send_message
            data:
              message: "{{ message }}"
              title: "{{ title|default('', true) }}"
              target: "{{ states('input_text.dannys_telegram_chat_id') }}"
            continue_on_error: true
    mode: queued
    max: 10
  post_to_telegram_home_log_with_local_attachments:
    alias: "Post To Telegram With Local Attachments"
    icon: mdi:message-reply-text
    description: "Post a message with a file attachment to the home_log channel.
    Please use a send script to decouple from the messaging platform."
    fields:
      message:
        description: Message to post
        required: true
        selector:
          text:
            multiline: true
      title:
        description: (optional)Title to the message posted.
        selector:
          text:
      filePath:
        description: File path to attach to post.
        required: true
        selector:
          text:
    sequence:
      - action: notify.danny_tsang
        data:
          message: "{{ message }}"
          title: "{{ title|default('', true) }}"
          file: "{{ filePath }}"
        continue_on_error: true
    mode: queued
    max: 10
