# Created by Danny Tsang <danny@tsang.uk>
# Integration: https://www.home-assistant.io/integrations/telegram/
automation:
  - id: "1653739708849"
    alias: "Telegram: Event Received"
    description: ""
    trigger:
      - platform: event
        event_type: telegram_command
    condition: []
    action:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.command == 'get_camera'}}"
            sequence:
              - service: script.send_to_home_log
                data:
                  message: Getting camera {{trigger.event.data.args}}
        default:
          - service: script.send_to_home_log
            data:
              message: >-
                Received Telegram event:
                command: {{trigger.event.data.command}}
                args: {{trigger.event.data.args}}
                from_first: {{trigger.event.data.from_first}}
                from_last: {{trigger.event.data.from_last}}
                user_id: {{trigger.event.data.user_id}}
                chat_id: {{trigger.event.data.chat_id}}
                chat: {{trigger.event.data.chat}}
    mode: queued
  - id: "1653739708850"
    alias: "Telegram: Message Received"
    description: ""
    trigger:
      - platform: event
        event_type: telegram_text
    condition: []
    action:
      - service: script.send_to_home_log
        data:
          message: >-
            :speech_balloon: Received Telegram event:
            chat: {{trigger.event.data.chat}}
            from_first: {{trigger.event.data.from_first}}
            from_last: {{trigger.event.data.from_last}}
            user_id: {{trigger.event.data.user_id}}
            chat_id: {{trigger.event.data.chat_id}}
            text: {{trigger.event.data.text}}
    mode: queued
  - id: "1653739708851"
    alias: "Telegram: Callback Received"
    description: ""
    trigger:
      - platform: event
        event_type: telegram_callback
    condition: []
    action:
      - service: script.send_to_home_log
        data:
          message: >-
            :speech_balloon: Received Telegram event:
            data: {{trigger.event.data.data}}
            message: {{trigger.event.data.message}}
            from_first: {{trigger.event.data.from_first}}
            from_last: {{trigger.event.data.from_last}}
            user_id: {{trigger.event.data.user_id}}
            id: {{trigger.event.data.id}}
            chat_id: {{trigger.event.data.chat_id}}
            text: {{trigger.event.data.text}}
    mode: queued

script:
  post_telegram_direct_notification:
    alias: "Send Telegram Direct Message"
    icon: mdi:message-reply-text
    description: >-
      Post a direct text message to adults in the house. Please use
      a send script to decouple from the messaging platform.
    max: 10
    mode: queued
    fields:
      message:
        description: Message to post
        required: true
        selector:
          text:
      title:
        description: Title of post
        selector:
          text:
      people:
        description: Person to send the message to.
          If not specified then it goes to everyone.
        example: "['person.danny'] or ['person.danny','person.terina']"
        selector:
          target:
            entity:
              domain:
                - person
    sequence:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ 'person.danny' in people }}"
            sequence:
              - service: telegram_bot.send_message
                data:
                  message: "{{ message }}"
                  title: "{{ title|default('', true) }}"
                  config_entry_id: 01K3E0RTD04WM71CZ2G3F6VZ3W
                continue_on_error: true
        default:
          - service: telegram_bot.send_message
            data:
              message: "{{ message }}"
              title: "{{ title|default('', true) }}"
              config_entry_id: 01K3E0RTD04WM71CZ2G3F6VZ3W
            continue_on_error: true
  post_to_telegram_home_log_with_local_attachments:
    alias: "Post To Telegram With Local Attachments"
    icon: mdi:message-reply-text
    description: "Post a message with a file attachment to the home_log channel.
    Please use a send script to decouple from the messaging platform."
    fields:
      message:
        description: Message to post
        required: true
        selector:
          text:
      title:
        description: (optional)Title to the message posted.
        selector:
          text:
      people:
        description: Person to send the message to.
          If not specified then it goes to everyone.
        example: "['person.danny'] or ['person.danny','person.terina']"
        selector:
          target:
            entity:
              domain:
                - person
      filePath:
        description: File path to attach to post.
        required: true
        selector:
          text:
            type: "url"
    sequence:
      - service: notify.danny_tsang
        data:
          message: "{{ message }}"
          title: "{{ title|default('', true) }}"
          config_entry_id: 01K3E0RTD04WM71CZ2G3F6VZ3W
          file: "{{ filePath }}"
        continue_on_error: true
    mode: queued
    max: 10
