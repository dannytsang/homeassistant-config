# Created by Danny Tsang <danny@tsang.uk>
# Possible states: https://docs.sleep.urbandroid.org/services/automation.html#events
automation:
  # General
  - id: "1614285576722"
    alias: "Sleep As Android: Event"
    description: ""
    triggers:
      - trigger: webhook
        webhook_id: sleep_as_android
        allowed_methods:
          - POST
        local_only: false
    condition: []
    actions:
      - parallel:
          - action: input_text.set_value
            entity_id: input_text.sleep_as_android
            data:
              value: "{{ trigger.json.event }}"
          - choose:
              - conditions:
                  - condition: state
                    entity_id: input_select.sleep_as_android_notification_level
                    state: "Start/Stop"
                  - condition: template
                    value_template: "{{ trigger.json.event in ['sleep_tracking_started', 'sleep_tracking_stopped'] }}"
                sequence:
                  - action: script.send_to_home_log
                    data:
                      message: "Changed to {{ trigger.json.event }}"
                      title: ":zzz: Sleep as :robot_face: Android"
                      log_level: "Debug"
              - conditions:
                  - condition: state
                    entity_id: input_select.sleep_as_android_notification_level
                    state: "Start/Stop/Alarms"
                  - or:
                    - condition: template
                      value_template: "{{ 'alarm' in trigger.json.event }}"
                    - condition: template
                      value_template: "{{ trigger.json.event in ['sleep_tracking_started', 'sleep_tracking_stopped'] }}"
                sequence:
                  - action: script.send_to_home_log
                    data:
                      message: "Changed to {{ trigger.json.event }}"
                      title: ":zzz: Sleep as :robot_face: Android"
                      log_level: "Debug"
              - conditions:
                  - condition: state
                    entity_id: input_select.sleep_as_android_notification_level
                    state: "All"
                sequence:
                  - action: script.send_to_home_log
                    data:
                      message: "Changed to {{ trigger.json.event }}"
                      title: ":zzz: Sleep as :robot_face: Android"
                      log_level: "Debug"
            default: []
    mode: queued
    max: 10
  # Sleep Timer
  - id: "1658438667856"
    alias: "Sleep As Android: Started Tracking"
    description: ""
    triggers:
      - trigger: state
        entity_id:
          - input_text.sleep_as_android
        to: sleep_tracking_started
    condition: []
    actions:
      - choose:
          - conditions:
              - condition: state
                entity_id: person.danny
                state: "home"
            sequence:
              - parallel:
                - action: timer.start
                  data:
                    duration: "{% set new_ts = states('input_number.sleep_timer_duration')|int(60) * 60 %}
                    {{ '{:02d}:{:02d}:{:02d}'.format(new_ts // 3600, (new_ts % 3600) // 60, (new_ts % 3600) % 60) }}"
                  target:
                    entity_id: timer.sleep
                - action: script.send_to_home_log
                  data:
                    message: "Sleep :hourglass_flowing_sand: timer :arrow_forward: started. Time remaining:
                      {% set new_ts = states('input_number.sleep_timer_duration')|int(60) * 60 %}
                      {{ '{:02d}:{:02d}:{:02d}'.format(new_ts // 3600, (new_ts % 3600) // 60, (new_ts % 3600) % 60) }}"
                    title: ":zzz: Sleep as :robot_face: Android"
                    log_level: "Normal"
        default: []
      - alias: Turn on bedroom fan
        if:
          - condition: numeric_state
            entity_id: sensor.bedroom_area_mean_temperature
            above: 22.5
          - condition: state
            entity_id: person.danny
            state: home
          - condition: state
            entity_id: switch.bedroom_fan
            state: "off"
        then:
          - parallel:
              - action: script.send_to_home_log
                data:
                  message: >-
                    Bedroom is warm ({{ states('sensor.bedroom_area_mean_temperature') }} > 22.5).
                    Turning on bedroom fan.
                  title: ":zzz: Sleep as :robot_face: Android"
                  log_level: "Debug"
              - action: switch.turn_on
                metadata: {}
                data: {}
                target:
                  entity_id: switch.bedroom_fan
    mode: single
  - id: "1658843567854"
    alias: "Sleep As Android: Awake"
    description: ""
    triggers:
      - trigger: state
        entity_id:
          - input_text.sleep_as_android
        to: awake
    condition:
      - condition: state
        entity_id: timer.sleep
        state: "active"
    actions:
      - parallel:
        - action: timer.pause
          data: {}
          target:
            entity_id: timer.sleep
        - action: script.send_to_home_log
          data:
            message: ":pause_button: Pausing sleep :hourglass_flowing_sand: timer. Time remaining:
              {{ state_attr('timer.sleep', 'remaining') }}"
            title: ":zzz: Sleep as :robot_face: Android"
            log_level: "Normal"
    mode: queued
    max: 10
  - id: "1658843828191"
    alias: "Sleep As Android: Fall Asleep"
    description: ""
    triggers:
      - trigger: state
        entity_id:
          - input_text.sleep_as_android
        from: "awake"
    condition:
      - condition: state
        entity_id: timer.sleep
        state: "paused"
    actions:
      - parallel:
          - action: timer.start
            data:
              # https://community.home-assistant.io/t/add-time-to-running-timer/120730/12
              duration:
                "{% set t = state_attr('timer.sleep', 'remaining').split(':') %}
                {% set ts = (t[0]|int * 3600) + (t[1]|int * 60) + t[2]|int + (states('input_number.sleep_as_android_time_to_add')|int(0) * 60) %}
                {% set new_ts = states('input_number.sleep_timer_duration')|int(0) * 60 if ts > states('input_number.sleep_timer_duration')|int(0) * 60 else ts %}
                {{ '{:02d}:{:02d}:{:02d}'.format(new_ts // 3600, (new_ts % 3600) // 60, (new_ts % 3600) % 60) }}"
            target:
              entity_id: timer.sleep
          - action: script.send_to_home_log
            data:
              message: >-
                Fell back asleep. :arrow_forward: Unpausing :hourglass_flowing_sand:
                timer and adding {{ states('input_number.sleep_as_android_time_to_add')|int(0) }} minutes to
                {{ state_attr('timer.sleep', 'remaining') }}.
                New time remaining: {{ state_attr('timer.sleep', 'remaining') }}
              title: ":zzz: Sleep as :robot_face: Android"
              log_level: "Normal"
    mode: single
  - id: "1659861914053"
    alias: "Sleep As Android: Danny Asleep For A Period Of Time"
    description: ""
    triggers:
      - trigger: state
        entity_id:
          - binary_sensor.danny_asleep
        to: "on"
        for:
          hours: 0
          minutes: 15
          seconds: 0
    condition:
      - condition: state
        entity_id: timer.sleep
        state: "active"
    actions:
      - action: script.send_to_home_log
        data:
          message: Asleep for 15 minutes. Taking 5 minutes off the timer.
          log_level: "Normal"
      # Pause to get the remainging time value.
      - action: timer.pause
        data: {}
        target:
          entity_id: timer.sleep
      - if:
          - condition: template
            value_template:
              "{% set t = state_attr('timer.sleep', 'remaining').split(':') %}
              {% set ts = (t[0]|int * 3600) + (t[1]|int * 60) + t[2]|int + states('input_number.sleep_as_android_time_to_add')|int(0) %}
              {{ (ts - (states('input_number.sleep_as_android_time_to_subtract')|int(0) * 60)) > 0 }}"
        then:
          - action: timer.start
            data:
              duration:
                "{% set t = state_attr('timer.sleep', 'remaining').split(':') %}
                {% set ts = (t[0]|int * 3600) + (t[1]|int * 60) + t[2]|int + states('input_number.sleep_as_android_time_to_add')|int(0) %}
                {% set new_ts = ts if (ts - (states('input_number.sleep_as_android_time_to_subtract')|int(0) * 60)) < 0 else (ts - (states('input_number.sleep_as_android_time_to_subtract')|int(0) * 60)) %}
                {{ '{:02d}:{:02d}:{:02d}'.format(new_ts // 3600, (new_ts % 3600) // 60, (new_ts % 3600) % 60) }}"
            target:
              entity_id: timer.sleep
          - action: script.send_to_home_log
            data:
              message: >-
                Danny has been asleep for more than 15 minutes.
                Taking {{ states('input_number.sleep_as_android_time_to_subtract') }} minutes
                off sleeper timer. New time remaining:
                {{ state_attr('timer.sleep', 'remaining') }}
              title: ":zzz: Sleep as :robot_face: Android"
              log_level: "Normal"
        else:
          - action: script.send_to_home_log
            data:
              message:
                "Danny has been asleep for more than 15 minutes with less than
                {{ states('input_number.sleep_as_android_time_to_subtract') }} minutes
                to go ({{ state_attr('timer.sleep', 'remaining') }})."
              title: ":zzz: Sleep as :robot_face: Android"
              log_level: "Normal"
    mode: single
  - id: "1658842750488"
    alias: "Timer: Sleep Timer Complete"
    description: ""
    triggers:
      - trigger: event
        event_type: timer.finished
        event_data:
          entity_id: timer.sleep
    condition: []
    actions:
      - action: script.send_to_home_log
        data:
          message: Sleep timer finished. Turning everything off.
          title: ":zzz: Sleep as :robot_face: Android"
          log_level: "Normal"
      - action: script.bedroom_sleep
        data: {}
      - alias: Turn off bedroom fan
        if:
          - condition: state
            entity_id: switch.bedroom_fan
            state: "on"
        then:
          - parallel:
              - action: script.send_to_home_log
                data:
                  message: >-
                    Bedroom is warm ({{ states('sensor.bedroom_area_mean_temperature') }} > 21c).
                    Turning on bedroom fan.
                  title: ":zzz: Sleep as :robot_face: Android"
                  log_level: "Debug"
              - action: switch.turn_on
                metadata: {}
                data: {}
                target:
                  entity_id: switch.bedroom_fan
    mode: single
  - id: "1644769166837"
    alias: "Bedroom: Danny's Alarm"
    description: ""
    triggers:
      - trigger: state
        entity_id: input_text.sleep_as_android
        to: "alarm_alert_start"
    condition: []
    actions:
      - parallel:
        - choose:
            - conditions:
                - condition: state
                  entity_id: person.danny
                  state: "home"
                - condition: state
                  entity_id: input_boolean.enable_bedroom_blind_automations
                  state: "on"
                - condition: numeric_state
                  entity_id: cover.bedroom_blinds
                  attribute: current_position
                  below: input_number.blind_closed_position_threshold
              sequence:
                - action: script.send_to_home_log
                  data:
                    message: >-
                      :alarm_clock: Alarm triggered. Opening bedroom
                      blinds in 1 minute.
                    title: ":zzz: Sleep as :robot_face: Android"
                    log_level: "Normal"
                - delay:
                    hours: 0
                    minutes: 5
                    seconds: 0
                    milliseconds: 0
                - action: cover.open_cover
                  data: {}
                  target:
                    entity_id: cover.bedroom_blinds
            - conditions:
                - condition: state
                  entity_id: person.danny
                  state: "home"
              sequence:
                - action: script.send_to_home_log
                  data:
                    message:
                      ":bed: :alarm_clock: alarm triggered."
                    title: ":zzz: Sleep as :robot_face: Android"
                    log_level: "Normal"
          default: []
        - if:
            - condition: state
              entity_id: light.bedroom_clock_matrix
              state: "off"
          then:
            - action: light.turn_on
              data: {}
              target:
                entity_id: light.bedroom_clock_matrix
    mode: single
  - id: "1667424349110"
    alias: "Sleep As Android: Stop Sleep Timer"
    description: ""
    triggers:
      - trigger: time
        at: "05:00:00"
    condition:
      - condition: or
        conditions:
          - condition: state
            entity_id: timer.sleep
            state: "active"
          - condition: state
            entity_id: timer.sleep
            state: "paused"
    actions:
      - parallel:
          - action: script.send_to_home_log
            data:
              message: Cancelling sleep timer.
              title: ":zzz: Sleep as :robot_face: Android"
              log_level: "Normal"
          - action: timer.cancel
            data: {}
            target:
              entity_id: timer.sleep
    mode: single

template:
  - binary_sensor:
    - name: "Danny Asleep"
      unique_id: 94b3d4d4-f5d9-4f9c-ae32-c98c40df72dc
      state: "{{ states('input_text.sleep_as_android') not in ['awake','sleep_tracking_stopped'] }}"
      icon: "mdi:sleep{{ '-off' if states('input_text.sleep_as_android') in ['awake','sleep_tracking_stopped'] else '' }}"
