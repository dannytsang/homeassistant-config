# Created by Danny Tsang <danny@tsang.uk>
# Possible states: https://docs.sleep.urbandroid.org/services/automation.html#events
automation:
  # General
  - id: "1614285576722"
    alias: "^Sleep As Android: Event"
    description: ""
    trigger:
      - platform: webhook
        webhook_id: sleep_as_android
    condition: []
    action:
      - parallel:
          - service: input_text.set_value
            entity_id: input_text.sleep_as_android
            data:
              value: "{{ trigger.json.event }}"
          - choose:
              - conditions:
                  - condition: state
                    entity_id: input_select.sleep_as_android_notification_level
                    state: "Start/Stop"
                  - condition: template
                    value_template: "{{ trigger.json.event in ['sleep_tracking_started', 'sleep_tracking_stopped'] }}"
                sequence:
                  - service: script.send_to_home_log
                    data:
                      message: "Changed to {{ trigger.json.event }}"
                      title: ":zzz: Sleep as :robot_face: Android"
              - conditions:
                  - condition: state
                    entity_id: input_select.sleep_as_android_notification_level
                    state: "Start/Stop/Alarms"
                  - or:
                    - condition: template
                      value_template: "{{ 'alarm' in trigger.json.event }}"
                    - condition: template
                      value_template: "{{ trigger.json.event in ['sleep_tracking_started', 'sleep_tracking_stopped'] }}"
                sequence:
                  - service: script.send_to_home_log
                    data:
                      message: "Changed to {{ trigger.json.event }}"
                      title: ":zzz: Sleep as :robot_face: Android"
              - conditions:
                  - condition: state
                    entity_id: input_select.sleep_as_android_notification_level
                    state: "All"
                sequence:
                  - service: script.send_to_home_log
                    data:
                      message: "Changed to {{ trigger.json.event }}"
                      title: ":zzz: Sleep as :robot_face: Android"
            default: []
    mode: queued
    max: 10
  # Sleep Timer
  - id: "1658438667856"
    alias: "^Sleep As Android: Started Tracking"
    description: ""
    trigger:
      - platform: state
        entity_id:
          - input_text.sleep_as_android
        to: sleep_tracking_started
    condition: []
    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: person.danny
                state: home
            sequence:
              - parallel:
                - service: timer.start
                  data:
                    duration: "{% set new_ts = states('input_number.sleep_timer_duration')|int(60) * 60 %}
                    {{ '{:02d}:{:02d}:{:02d}'.format(new_ts // 3600, (new_ts % 3600) // 60, (new_ts % 3600) % 60) }}"
                  target:
                    entity_id: timer.sleep
                - service: script.send_to_home_log
                  data:
                    message: "Sleep :hourglass_flowing_sand: timer :arrow_forward: started. Time remaining:
                      {{ state_attr('timer.sleep', 'remaining') }}"
                    title: ":zzz: Sleep as :robot_face: Android"
        default: []
    mode: single
  - id: "1658843567854"
    alias: "^Sleep As Android: Awake"
    description: ""
    trigger:
      - platform: state
        entity_id:
          - input_text.sleep_as_android
        to: awake
    condition:
      - condition: state
        entity_id: timer.sleep
        state: active
    action:
      - parallel:
        - service: timer.pause
          data: {}
          target:
            entity_id: timer.sleep
        - service: script.send_to_home_log
          data:
            message: ":pause_button: Pausing sleep :hourglass_flowing_sand: timer. Time remaining:
              {{ state_attr('timer.sleep', 'remaining') }}"
            title: ":zzz: Sleep as :robot_face: Android"
    mode: queued
    max: 10
  - id: "1658843828191"
    alias: "^Sleep As Android: Fall Asleep"
    description: ""
    trigger:
      - platform: state
        entity_id:
          - input_text.sleep_as_android
        from: awake
    condition:
      - condition: state
        entity_id: timer.sleep
        state: paused
    action:
      - parallel:
          - service: timer.start
            data:
              # https://community.home-assistant.io/t/add-time-to-running-timer/120730/12
              duration:
                "{% set t = state_attr('timer.sleep', 'remaining').split(':') %}
                {% set ts = (t[0]|int * 3600) + (t[1]|int * 60) + t[2]|int + states('input_number.sleep_as_android_time_to_add')|int(0) %}
                {% set new_ts = states('input_number.sleep_timer_duration')|int(0) * 60 if ts > states('input_number.sleep_timer_duration')|int(0) * 60 else ts %}
                {{ '{:02d}:{:02d}:{:02d}'.format(new_ts // 3600, (new_ts % 3600) // 60, (new_ts % 3600) % 60) }}"
            target:
              entity_id: timer.sleep
          - service: script.send_to_home_log
            data:
              message:
                "Fell back asleep. :arrow_forward: Unpausing :hourglass_flowing_sand:
                timer and adding 15 minutes. New time
                remaining: {{ state_attr('timer.sleep', 'remaining') }}"
              title: ":zzz: Sleep as :robot_face: Android"
    mode: single
  - id: "1658842750488"
    alias: "^Timer: Sleep Timer Complete"
    description: ""
    trigger:
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.sleep
    condition: []
    action:
      - service: script.send_to_home_log
        data:
          message: Sleep timer finished. Turning everything off.
          title: ":zzz: Sleep as :robot_face: Android"
      - service: script.bedroom_sleep
        data: {}
    mode: single

template:
  - binary_sensor:
    - name: "Danny Asleep"
      state: "{{ states('input_text.sleep_as_android') not in ['awake','sleep_tracking_stopped'] }}"
      icon: "mdi:sleep{{ '-off' if states('input_text.sleep_as_android') in ['awake','sleep_tracking_stopped'] else '' }}"
