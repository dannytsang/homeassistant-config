# Created by Danny Tsang <danny@tsang.uk>
automation:
  # Notifications
  - id: "1661076689668"
    alias: "Energy: Battery Charged And Forecasted Excess Solar"
    description: ""
    trigger:
      - platform: numeric_state
        entity_id: sensor.growatt_sph_battery_state_of_charge
        above: input_number.battery_charged_notification
    condition:
      - condition: or
        conditions:
          - condition: numeric_state
            entity_id: sensor.total_solar_forecast_estimated_energy_production_this_hour
            above: "0"
          - condition: numeric_state
            entity_id: sensor.total_solar_forecast_estimated_energy_production_next_hour
            above: "0"
    action:
      - service: script.energy_notify_excess_solar
        data: {}
    mode: single
  - id: "1660858653319"
    alias: "Energy: Solar Forecast Tomorrow"
    description: ""
    trigger:
      - platform: time
        at: "21:00:00"
    condition: []
    action:
      - alias: update forecast
        service: script.update_solcast
        data: {}
      - parallel:
          - if:
              - condition: numeric_state
                entity_id: sensor.total_solar_forecast_estimated_energy_production_tomorrow
                below: input_number.solar_generation_minimum_threshold
            then:
              - service: script.send_to_home_log
                data:
                  message: >-
                    Forecast generation is expected to be low
                    ({{ states('sensor.total_solar_forecast_estimated_energy_production_tomorrow') }}<
                    {{ states('input_number.solar_generation_minimum_threshold', with_unit=True) }}).

                    Incrementing counter from {{ states('input_number.consecutive_forecast_days_below_solar_generation') }} to
                    {{ (states('input_number.consecutive_forecast_days_below_solar_generation')|int(0)) + 1 }}
                    {{ state_attr('input_number.consecutive_forecast_days_below_solar_generation', 'unit_of_measurement') }}.
                  title: ":sunny: :zap: Solar"
                  log_level: "Normal"
              - service: input_number.increment
                data: {}
                target:
                  entity_id: input_number.consecutive_forecast_days_below_solar_generation
            else:
              - service: input_number.set_value
                data:
                  value: 0
                target:
                  entity_id: input_number.consecutive_forecast_days_below_solar_generation
          - service: script.energy_notify_tomorrows_solar_forecast
            data: {}
          - service: input_number.set_value
            data:
              value: "{{ states('sensor.total_solar_forecast_estimated_energy_production_tomorrow')|float(0) }}"
            target:
              entity_id: input_number.total_solar_forecast_estimated_energy_production_tomorrow
    mode: single
  - id: "1664743590782"
    alias: "Energy: Battery Charged Today"
    description: ""
    trigger:
      - platform: numeric_state
        entity_id: sensor.growatt_sph_battery_state_of_charge
        above: input_number.growatt_battery_charged_threshold
    condition:
      - condition: state
        entity_id: input_boolean.battery_charged_today
        state: "off"
    action:
      - service: script.send_to_home_log
        data:
          message: Battery charged today
          title: ":sunny: :zap: Solar"
          log_level: "Debug"
      - service: input_boolean.turn_on
        data: {}
        target:
          entity_id: input_boolean.battery_charged_today
      - if:
          - condition: numeric_state
            entity_id: input_number.consecutive_days_battery_not_charged
            above: 0
        then:
          - service: script.send_to_home_log
            data:
              message: Resetting days not fully charged.
              title: ":sunny: :zap: Solar"
              log_level: "Debug"
          - service: input_number.set_value
            data:
              value: 0
            target:
              entity_id: input_number.consecutive_days_battery_not_charged
    mode: single
  - id: "1664743700827"
    alias: "Energy: Reset Battery Charged Today"
    description: ""
    trigger:
      - platform: time
        at: "00:00:00"
    condition: []
    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: input_boolean.battery_charged_today
                state: "on"
            sequence:
              - parallel:
                  - service: script.send_to_home_log
                    data:
                      message: Resetting battery charged today.
                      title: ":sunny: :zap: Solar"
                      log_level: "Debug"
                  - service: input_boolean.turn_off
                    data: {}
                    target:
                      entity_id: input_boolean.battery_charged_today
          - conditions:
              - condition: state
                entity_id: input_boolean.battery_charged_today
                state: "off"
            sequence:
              - service: script.send_to_home_log
                data:
                  message: >-
                    Battery did not fully charge today
                    (> {{ states('input_number.growatt_battery_charged_threshold', with_unit=True) }}).
                    Adding a day to count
                    ({{ states('input_number.consecutive_days_battery_not_charged') }}).
                  title: ":sunny: :zap: Solar"
                  log_level: "Debug"
              - service: input_number.increment
                data: {}
                target:
                  entity_id: input_number.consecutive_days_battery_not_charged
    mode: single
  - id: "1663589154517"
    alias: "Energy: Solar Production exceed threshold"
    description: ""
    trigger:
      - platform: numeric_state
        entity_id: sensor.total_solar_forecast_estimated_energy_production_today
        above: input_number.solar_generation_minimum_threshold
    condition: []
    action:
      - service: script.send_to_home_log
        data:
          message: Production above threshold. Resetting Forecast
          title: ":sunny: :zap: Solar"
          log_level: "Debug"
    mode: single
  - id: "1664744505278"
    alias: "Energy: Consecutive Days Battery Not Charged"
    description: ""
    trigger:
      - platform: numeric_state
        entity_id: input_number.consecutive_days_battery_not_charged
        above: 6
    condition: []
    action:
      - service: script.send_direct_notification
        data:
          message:
            It has been {{ states('input_number.consecutive_days_battery_not_charged')
            }} days where the battery has not been charged fully.
          title: ":sunny: :zap: Solar"
          people:
            entity_id:
              - person.danny
    mode: single
  - id: "1663588514009"
    alias: "Energy: Consecutive Low Solar Generation"
    description: ""
    trigger:
      - platform: numeric_state
        entity_id: input_number.consecutive_forecast_days_below_solar_generation
        above: 6
    condition: []
    action:
      - service: script.send_direct_notification
        data:
          message:
            It has been {{ states('input_number.consecutive_forecast_days_below_solar_generation')
            }} days with low solar generation.
          title: ":sunny: :zap: Solar"
          people:
            entity_id:
              - person.danny
    mode: single
  - id: "1674508693884"
    alias: "Energy: Battery Charge Notification"
    description: Used for Demand Flexibility Service
    trigger:
      - platform: time
        at: "15:55:00"
    condition:
      - condition: template
        value_template: "{{ (states('sensor.growatt_sph_battery_state_of_charge')|int(0)) >
        ((states('number.growatt_sph_load_first_stop_discharge')|int(0)) + 1) }}"
    action:
      - service: script.send_direct_notification
        data:
          message: >-
            {{ states('sensor.growatt_sph_battery_state_of_charge') }}%
            (That is {{ state_attr('sensor.battery_charge_remaining_hours', 'duration') }}) remaining.
          title: ":house_with_garden: :battery: House Battery"
          people:
            entity_id:
              - person.danny
    mode: single
  - id: "1704121569476"
    alias: "Energy: Low Battery Before Peak Time"
    description: "TODO: Make this dynmaic"
    trigger:
      - platform: time
        at: "14:00:00"
      - platform: time
        at: "15:00:00"
    condition:
      - condition: template
        value_template: >-
          {{ today_at("19:00") < as_datetime(states('sensor.battery_charge_remaining_hours')) }}
      - not:
        - condition: state
          entity_id: select.growatt_sph_work_mode_priority
          state: "Battery first"
    action:
      - service: script.send_direct_notification
        data:
          message: >-
            Battery will not last beyond 19:00 today
            ({{ as_datetime(states('sensor.battery_charge_remaining_hours')) }}).
            Consider charging the battery.
          title: Solar
          people:
            entity_id: person.danny
    mode: single
  - id: "1680444237958"
    alias: "Energy: Power Cut Notification"
    description: ""
    trigger:
      - platform: state
        entity_id:
          - sensor.growatt_sph_load_power
        to: "0"
        for:
          hours: 0
          minutes: 1
          seconds: 0
    condition: []
    action:
      - service: script.send_direct_notification
        data:
          message:
            No electricty consumption detected for over a minute. Check for power
            cut.
          title: ":warning: :zap: :house_with_garden: House :warning:"
    mode: single
  # Solcast
  - id: "1691767286139"
    alias: "Solcast: Update Forecast"
    description: ""
    trigger:
      - platform: time
        at: "08:00:00"
    condition: []
    action:
      - service: solcast_solar.update_forecasts
        data: {}
    mode: single

conversation:
  intents:
    getBatteryLevel:
      - "How much battery is left"
      - "[What is the] (battery|charge) level"
    getBatteryRunTime:
      - "How long will the battery last [for]"
      - "How long will the battery run [for]"
      - "[What is the] battery (run time|runtime|hour|hours)"
      - "When will the battery run out"
    getBatterySummary:
      - "Battery summary"
    getSolarForecastLeft:
      - "[How much] solar [generation is] (left|remaining) [today]"
      - "Remaining solar [generation] [forecast] [today]"
    getSolarForecastToday:
      - "[What is the] solar forecast today"
    getSolarForecastTomorrow:
      - "[What is the] solar forecast"
    getSolarGeneratedToday:
      - "[How much] solar [has] [generated|created] [today|so far]"

intent_script:
  getBatteryLevel:
    speech:
      text: >-
        {{ states('sensor.growatt_sph_battery_state_of_charge', with_unit=True) }}
  getBatteryRunTime:
    speech:
      text: >-
        {{ states('sensor.battery_charge_remaining_hours') }}
  getBatterySummary:
    speech:
      text: >-
        {{ states('sensor.growatt_sph_battery_state_of_charge', with_unit=True) }}
        and will run out in {{ states('sensor.battery_charge_remaining_hours') }}
  getSolarForecastLeft:
    speech:
      text: >-
        {{ (states('sensor.total_solar_forecast_estimated_energy_production_today')|float(0) - states('sensor.growatt_solar_generated_energy_today')|float(0))|round(2) }}
        {{ state_attr('sensor.growatt_solar_generated_energy_today', 'unit_of_measurement') }} remaining.
  getSolarForecastToday:
    speech:
      text: >-
        Today's forecast is
        {{ states('sensor.total_solar_forecast_estimated_energy_production_today', with_unit=True) }}.
  getSolarForecastTomorrow:
    speech:
      text: >-
        Tomorrow's forecast is
        {{ states('sensor.total_solar_forecast_estimated_energy_production_tomorrow', with_unit=True) }}.
  getSolarGeneratedToday:
    speech:
      text: >-
        {{ states('sensor.growatt_solar_generated_energy_today', with_unit=True) }}

script:
  energy_notify_excess_solar:
    alias: Energy Notify Excess Solar
    variables:
      people_home: "{% set people = namespace(home=[]) %}
        {% for p in state_attr('group.adult_people', 'entity_id')|default([]) %}
        {% if states(p) == 'home' %}
        {% set people.home = people.home + [p] %}
        {% endif %}
        {% endfor %}
        {{ people.home }}"
      message: >-
        :battery: Battery charged to
        ({{ states('sensor.growatt_sph_battery_state_of_charge', with_unit=True) }}).
        {% if ((states('sensor.growatt_battery_charge_power')|float(0)) > 0) and
        state_attr('sensor.time_to_charge_battery', 'time_remaining') is not none %}
        It will take around {{ state_attr('sensor.time_to_charge_battery', 'time_remaining') }}
        to charge the battery.
        {% endif %}
        It's estimated to produce
        {{ states('sensor.total_solar_forecast_estimated_energy_production_next_hour', with_unit=True) }}
        in the next hour.
        {% if (states('sensor.growatt_solar_generated_energy_today')|float(0))|round(2) < (states('sensor.total_solar_forecast_estimated_energy_production_today')|float(0)) %}


        There's approximately
        {{ ((states('sensor.total_solar_forecast_estimated_energy_production_today')|float(0)) -
        (states('sensor.growatt_solar_generated_energy_today')|float(0)))|round(2) }}
        (out of {{ (states('sensor.total_solar_forecast_estimated_energy_production_today')|float(0))|round(2) }})
        {{ state_attr('sensor.total_solar_forecast_estimated_energy_production_today', 'unit_of_measurement') }}
        to be produced to the end of the day ({{ as_timestamp(state_attr('sun.sun','next_setting')) | timestamp_custom('%H:%M') }}).
        {% endif %}
      title: ":sunny: :zap: Solar"
    sequence:
      - if:
          - condition: template
            value_template: "{{ (people_home|default([]))|length > 0 }}"
        then:
          - service: script.send_direct_notification
            data:
              message: "{{ message }}"
              title: ":sunny: :zap: :electric_plug: Solar"
              people:
                entity_id: "{{ people_home }}"
        else:
          - service: script.send_to_home_log
            data:
              message: "{{ message }}"
              title: ":sunny: :zap: :electric_plug: Solar"
              log_level: "Normal"
    mode: single
    icon: mdi:solar-power
  energy_notify_tomorrows_solar_forecast:
    alias: Energy Notify Tommorow's Solar Forecast
    variables:
      estimate_charge_percentage: >-
        {%- from 'charge_battery_amount.jinja' import calculate_charge_battery_amount -%}
        {{ calculate_charge_battery_amount(states('sensor.total_solar_forecast_estimated_energy_production_tomorrow')|float(0)) }}
      estimate_charge_kw: >-
        {{ (states('input_number.solar_battery_size')|float(0)
        *(1-(states('number.growatt_sph_load_first_stop_discharge')|float(0)/100)))
        *(estimate_charge_percentage|float(0)/100) }}
      estimate_charge_hours: >-
        {{ (states('input_number.solar_battery_size')|float(0)
        *(1-(states('number.growatt_sph_load_first_stop_discharge')|float(0)/100)))
        *(estimate_charge_percentage|float(0)/100)
        / states('input_number.solar_battery_max_charge_rate')|float(0) }}
    sequence:
      - service: script.send_direct_notification
        data:
          message: >-
            {%- from 'get_solar_forecast.jinja' import get_first_solar_generation, get_last_solar_generation -%}
            {%- from 'charge_battery_amount.jinja' import calculate_charge_battery_amount -%}
            {%- from 'get_cheapest_electricity_rates.jinja' import get_cheapest_electricity_rates -%}
            Generation forecast for tomorrow ({{ (as_timestamp(now()) - (24*3600)) | timestamp_custom('%Y-%m-%d', True) }})
            will be
            {{ states('sensor.total_solar_forecast_estimated_energy_production_tomorrow', with_unit=True) }}
            and will start at {{ as_timestamp(get_first_solar_generation('sensor.solcast_pv_forecast_forecast_tomorrow', 'detailedForecast', 'period_start', 'pv_estimate')|replace(' ', 'T'))|timestamp_custom('%H:%M:%S') }}.
            {%- if get_first_solar_generation('sensor.solcast_pv_forecast_forecast_tomorrow', 'detailedForecast', 'period_start', 'pv_estimate', 0.7)|default(none, true) is not none -%}
            The first self sustaining generation will occur at
            {{ as_timestamp(get_first_solar_generation('sensor.solcast_pv_forecast_forecast_tomorrow', 'detailedForecast', 'period_start', 'pv_estimate', 0.7)|replace(' ', 'T'))|timestamp_custom('%H:%M:%S') }}
            ({{ get_first_solar_generation('sensor.solcast_pv_forecast_forecast_tomorrow', 'detailedForecast', 'pv_estimate', 'pv_estimate', 0.7)|round(2) }} kWh).


            The last self sustaining generation of the day will be at
            {{ as_timestamp(get_last_solar_generation('sensor.solcast_pv_forecast_forecast_tomorrow', 'detailedForecast', 'period_start', 'pv_estimate', 0.7)|replace(' ', 'T'))|timestamp_custom('%H:%M:%S') }}
            ({{ get_last_solar_generation('sensor.solcast_pv_forecast_forecast_tomorrow', 'detailedForecast', 'pv_estimate', 'pv_estimate', 0.7)|round(2) }} kWh) finishing at
            {{ as_timestamp(get_last_solar_generation('sensor.solcast_pv_forecast_forecast_tomorrow', 'detailedForecast', 'period_start', 'pv_estimate')|replace(' ', 'T'))|timestamp_custom('%H:%M:%S') }}.
            {%- endif -%}
            {%- if estimate_charge_percentage != 23 %}


            Charge :house_with_garden::battery: battery to {{ estimate_charge_percentage }}% to {{ estimate_charge_kw }}kWh.


            Charge time required: {{ estimate_charge_hours|round(2, 'ceil') }}kWh. {{ (estimate_charge_hours * 2)|round(0)/2 }} hours ({{ (((estimate_charge_hours * 2)|round(0)/2)*2)|round(0) }} slots).
            {%- endif -%}
          title: ":sunny: :zap: Solar"
          people:
            entity_id:
              - person.danny
  remaining_solar_forecast_today:
    variables:
      remaining: >-
        {
          'value':{{ (states('sensor.total_solar_forecast_estimated_energy_production_today')|float(0) - states('sensor.growatt_solar_generated_energy_today')|float(0))|round(2) }},
          'unit_of_measurement': '{{ state_attr('sensor.growatt_solar_generated_energy_today', 'unit_of_measurement') }}'
        }
    sequence:
      - stop: End
        response_variable: remaining
  update_solcast:
    alias: Update Solcast
    sequence:
      - if:
          - condition: numeric_state
            entity_id: sensor.solcast_pv_forecast_api_used
            below: sensor.solcast_pv_forecast_api_limit
        then:
          - parallel:
              - service: script.send_to_home_log
                data:
                  message: "Updating Solcast forecast."
                  title: ":sunny: :zap: :electric_plug: Solcast"
                  log_level: "Debug"
              - service: solcast_solar.update_forecasts
                data: {}
        else:
          - service: script.send_to_home_log
            data:
              message: "Reached API limit."
              title: ":warning: :sunny: :zap: :electric_plug: Solcast :warning:"
              log_level: "Normal"
