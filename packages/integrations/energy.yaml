# Created by Danny Tsang <danny@tsang.uk>
automation:
  # Solar
  - id: "1660317032653"
    alias: "Energy: Growatt Unavailable"
    description: ""
    trigger:
      - platform: state
        entity_id:
          - sensor.growatt_sph6000_last_data_update
        to: unavailable
        for:
          hours: 0
          minutes: 5
          seconds: 0
    condition:
      - condition: state
        entity_id: input_boolean.enable_growatt_update_check
        state: "on"
    action:
      - service: script.send_direct_notification
        data:
          message: Growatt is unavilable.
          title: ":sunny: :zap: :electric_plug: Solar"
          people:
            - person.danny
    mode: single
  - id: "1660403632839"
    alias: "Energy: Growatt Updating"
    description: "Needed to work around https://github.com/home-assistant/core/issues/76451"
    trigger:
      - platform: state
        entity_id: sensor.growatt_sph6000_last_data_update
        for:
          hours: 0
          minutes: 20
          seconds: 0
      - platform: time_pattern
        minutes: "55"
    condition:
      - condition: state
        entity_id: input_boolean.enable_growatt_update_check
        state: "on"
      - condition: or
        conditions:
          - condition: state
            entity_id: sensor.growatt_sph6000_last_data_update
            state: "unavailable"
          # https://community.home-assistant.io/t/how-to-calculate-subtract-two-date-time-from-eachother/8197/14?u=tuxinator94
          - condition: template
            value_template: >-
              "{% set duration = as_timestamp(now()) - ((as_timestamp(states('sensor.growatt_sph6000_last_data_update')))|float(0)) %}
              {{duration|int(0) >= (states('input_number.growatt_max_last_updated')|float(0) * 60) }}"
    action:
      - parallel:
          - service: script.send_to_home_log
            data:
              message: "Growatt integration has not been updated for over
                {% set duration = as_timestamp(now()) -
                ((as_timestamp(states('sensor.growatt_sph6000_last_data_update')))|float(0)) %}
                {{ states('input_number.growatt_max_last_updated')|int(0) }} (
                {{ (duration / 60)|round(0, 'floor') }})
                {{ state_attr('input_number.growatt_max_last_updated', 'unit_of_measurement') }}.
                Reloading integration."
              title: ":sunny: :zap: :electric_plug: Solar"
          # https://community.home-assistant.io/t/can-i-write-an-automation-to-reload-restart-an-integration/301020/35?u=tuxinator94
          - service: homeassistant.reload_config_entry
            data: {}
            target:
              entity_id:
                - sensor.growatt_sph6000_last_data_update
    mode: single
  # Notifications
  - id: "1661076689668"
    alias: "Energy: Battery Charged And Forecasted Excess Solar"
    description: ""
    trigger:
      - platform: numeric_state
        entity_id: sensor.growatt_sph6000_statement_of_charge
        above: input_number.battery_charged_notification
    condition:
      - condition: or
        conditions:
          - condition: numeric_state
            entity_id: sensor.total_solar_forecast_estimated_energy_production_this_hour
            above: "0"
          - condition: numeric_state
            entity_id: sensor.total_solar_forecast_estimated_energy_production_next_hour
            above: "0"
    action:
      - service: script.energy_notify_excess_solar
        data: {}
    mode: single
  - id: "1660858653319"
    alias: "Energy: Solar Forecast To Be Low"
    description: ""
    trigger:
      - platform: time
        at: "21:00:00"
    condition: []
    action:
      - choose:
          - conditions:
              - condition: numeric_state
                entity_id: sensor.total_solar_forecast_estimated_energy_production_tomorrow
                below: input_number.solar_generation_minimum_threshold
            sequence:
              - parallel:
                  - service: script.send_to_home_log
                    data:
                      message: Generation below threshold tomorrow. Incrementing consecutive days.
                      title: Solar
                  - service: input_number.increment
                    data: {}
                    target:
                      entity_id: input_number.consecutive_forecast_days_below_solar_generation
        default:
          - parallel:
              - service: script.send_to_home_log
                data:
                  message: Generation above threshold tomorrow. Resetting count to 0.
                  title: Solar
              - service: input_number.set_value
                data:
                  value: 0
                target:
                  entity_id: input_number.consecutive_forecast_days_below_solar_generation
    mode: single
  - id: "1664743590782"
    alias: "Energy: Battery Charged Today"
    description: ""
    trigger:
      - platform: numeric_state
        entity_id: sensor.growatt_sph6000_statement_of_charge
        above: input_number.growatt_battery_charged_threshold
    condition:
      - condition: state
        entity_id: input_boolean.battery_charged_today
        state: "off"
    action:
      - service: script.send_to_home_log
        data:
          message: Battery charged today
          title: Solar
      - service: input_boolean.turn_on
        data: {}
        target:
          entity_id: input_boolean.battery_charged_today
      - if:
          - condition: numeric_state
            entity_id: input_number.consecutive_days_battery_not_charged
            above: 0
        then:
          - service: script.send_to_home_log
            data:
              message: Resseting days not fully charged.
              title: Solar
          - service: input_number.set_value
            data:
              value: 0
            target:
              entity_id: input_number.consecutive_days_battery_not_charged
    mode: single
  - id: "1664743700827"
    alias: "Energy: Reset Battery Charged Today"
    description: ""
    trigger:
      - platform: time
        at: 00:00:00
    condition: []
    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: input_boolean.battery_charged_today
                state: "on"
            sequence:
              - parallel:
                  - service: script.send_to_home_log
                    data:
                      message: Resetting battery charged today.
                      title: Solar
                  - service: input_boolean.turn_off
                    data: {}
                    target:
                      entity_id: input_boolean.battery_charged_today
          - conditions:
              - condition: state
                entity_id: input_boolean.battery_charged_today
                state: "off"
            sequence:
              - service: script.send_to_home_log
                data:
                  message: Battery did not fully charge today. Adding a day to count.
                  title: Solar
              - service: input_number.increment
                data: {}
                target:
                  entity_id: input_number.consecutive_days_battery_not_charged
    mode: single
  - id: "1663589154517"
    alias: "Energy: Solar Production exceed threshold"
    description: ""
    trigger:
      - platform: numeric_state
        entity_id: sensor.total_solar_forecast_estimated_energy_production_today
        above: input_number.solar_generation_minimum_threshold
    condition: []
    action:
      - service: script.send_to_home_log
        data:
          message: Production above threshold. Resetting Forecast
          title: Solar
    mode: single

script:
  energy_notify_excess_solar:
    alias: Energy Notify Excess Solar
    variables:
      people_home: "{% set people = namespace(home=[]) %}
        {% for p in state_attr('group.adult_people', 'entity_id')|default([]) %}
        {% if states(p) == 'home' %}
        {% set people.home = people.home + [p] %}
        {% endif %}
        {% endfor %}
        {{ people.home }}"
      message: >-
        :battery: Battery charged to
        ({{ states('sensor.growatt_sph6000_statement_of_charge')~
        state_attr('sensor.growatt_sph6000_statement_of_charge', 'unit_of_measurement') }}).
        {% if (states('sensor.growatt_sph6000_battery_charging')|float(0)) > 0 %}
        It will take around {{ state_attr('sensor.time_to_charge_battery', 'time_remaining') }}
        to charge the battery.
        {% endif %}
        It's estimated to produce
        {{ states('sensor.total_solar_forecast_estimated_energy_production_next_hour') ~ ' ' ~
        state_attr('sensor.total_solar_forecast_estimated_energy_production_next_hour', 'unit_of_measurement') }}
        in the next hour.


        There's approximately
        {{ ((states('sensor.total_solar_forecast_estimated_energy_production_today')|float(0)) -
        (states('sensor.growatt_sph6000_solar_energy_today')|float(0)))|round(2) ~ ' ' ~
        state_attr('sensor.growatt_sph6000_solar_energy_today', 'unit_of_measurement') }}
        (out of {{ (states('sensor.total_solar_forecast_estimated_energy_production_today')|float(0))|round(2) ~ ' '
        ~ state_attr('sensor.total_solar_forecast_estimated_energy_production_today', 'unit_of_measurement') }})
        to be produced to the end of the day ({{ as_timestamp(state_attr('sun.sun','next_setting')) | timestamp_custom('%H:%M') }}).
      title: Solar
    sequence:
      - if:
          - condition: template
            value_template: "{{ (people_home|default([]))|length > 0 }}"
        then:
          - service: script.send_direct_notification
            data:
              message: "{{ message }}"
              title: ":sunny: :zap: :electric_plug: Solar"
              people: "{{ people_home }}"
        else:
          - service: script.send_to_home_log
            data:
              message: "{{ message }}"
              title: ":sunny: :zap: :electric_plug: Solar"
    mode: single
    icon: mdi:solar-power

template:
  - sensor:
      # Forecast
      - name: "Total Solar Forecast Estimated energy production - next hour"
        unique_id: 5203e039-773f-4aaf-9328-aa114cbaec9c
        state: "{{ states('sensor.energy_next_hour')|float(0) + states('sensor.energy_next_hour_2')|float(0) }}"
        unit_of_measurement: "kWh"
        device_class: "energy"
      - name: "Total Solar Forecast Estimated energy production - this hour"
        unique_id: 4d16252d-baf5-4f26-8e4f-4a2042d6a508
        state: "{{ states('sensor.energy_current_hour')|float(0) + states('sensor.energy_current_hour_2')|float(0) }}"
        unit_of_measurement: "kWh"
        device_class: "energy"
      - name: "Total Solar Forecast Estimated energy production - today"
        unique_id: aec02771-728e-4d83-828f-038e7031fae3
        state: "{{ states('sensor.energy_production_today')|float(0) + states('sensor.energy_production_today_2')|float(0) }}"
        unit_of_measurement: "kWh"
        device_class: "energy"
      - name: "Total Solar Forecast Estimated Energy Production - tomorrow"
        unique_id: faabd52e-ca7c-45ae-87f3-79c33ce94a3b
        state: "{{ states('sensor.energy_production_tomorrow')|float(0) + states('sensor.energy_production_tomorrow_2')|float(0) }}"
        unit_of_measurement: "kWh"
        device_class: "energy"
      - name: "Total Solar Forecast Estimated power production - now"
        unique_id: 86156911-5980-43bf-b8a9-1d6a7e4ad3cb
        state: "{{ states('sensor.power_production_now')|float(0) + states('sensor.power_production_now_2')|float(0) }}"
        unit_of_measurement: "W"
        device_class: "power"
      - name: "Total Solar Forecast Estimated power production - now (kW)"
        unique_id: 7018a713-4305-45eb-9cd6-b7b9a2ab44a3
        state: "{{ (states('sensor.power_production_now')|float(0) + states('sensor.power_production_now_2')|float(0))/1000 }}"
        unit_of_measurement: "kW"
        device_class: "power"
      - name: "Total Solar Forecast Estimated power production next 12 hours"
        unique_id: c366200e-74c2-49fb-a08a-b706a3120bf3
        state: "{{ states('sensor.power_production_next_12hours')|float(0) + states('sensor.power_production_next_12hours_2')|float(0) }}"
        unit_of_measurement: "kWh"
        device_class: "energy"
      - name: "Total Solar Forecast Estimated power production next 24 hours"
        unique_id: 327211fc-7224-454a-b8e6-cafa3c2cbafd
        state: "{{ states('sensor.power_production_next_24hours')|float(0) + states('sensor.power_production_next_24hours_2')|float(0) }}"
        unit_of_measurement: "kWh"
        device_class: "energy"
      - name: "Battery Charge Remaining"
        unique_id: 6d205780-4eaa-4340-a45f-71bbe7ccea5cx
        state: "{{ ((states('input_number.solar_battery_size')|float(0)) * ((states('sensor.growatt_sph6000_statement_of_charge')|float(0))/100))|round(2) }}"
        unit_of_measurement: "kW"
        device_class: "power"
  - trigger:
      - platform: state
        entity_id:
          - sensor.battery_charge_remaining
          - sensor.growatt_sph6000_load_consumption
    sensor:
      - name: "Battery Run Time"
        unique_id: c5955655-eb91-4bd7-9f8f-afc4e4f0c58c
        state: "{{ now() + timedelta( seconds = (((states('sensor.battery_charge_remaining')|float(0)) / (states('sensor.growatt_sph6000_load_consumption')|float(1))) * 60 * 60)|round(0)) }}"
        icon: mdi:battery-clock-outline
        attributes:
          duration: >-
            {% set ts = (((states('sensor.battery_charge_remaining')|float(0)) / (states('sensor.growatt_sph6000_load_consumption')|float(0))) * 60 * 60)|round(0) %}
            {{ '{:02d}:{:02d}:{:02d}'.format(ts // 3600, (ts % 3600) // 60, (ts % 3600) % 60) }}
        device_class: "timestamp"
  - trigger:
      - platform: state
        entity_id:
          - input_number.solar_battery_size
          - sensor.battery_charge_remaining
          - sensor.growatt_sph6000_load_consumption
    sensor:
      - name: "Time To Charge Battery"
        unique_id: 78ea1413-0d1c-4b89-b109-c961fc30f84d
        state: "{{ now() + timedelta( seconds = (((((states('input_number.solar_battery_size')|float(0))-(states('sensor.battery_charge_remaining')|float(0)))/(states('sensor.growatt_sph6000_battery_charging')|float(1)))*60*60)|round(0)) if (states('sensor.growatt_sph6000_battery_charging')|float(0)) != 0 else 359999) }}"
        icon: mdi:battery-clock
        attributes:
          duration: >-
            {% set ts = (((((states('input_number.solar_battery_size')|float(0))-(states('sensor.battery_charge_remaining')|float(0)))/(states('sensor.growatt_sph6000_battery_charging')|float(1)))*60*60)|round(0)) if (states('sensor.growatt_sph6000_battery_charging')|float(0)) != 0 else 359999 %}
            {{ '{:02d}:{:02d}:{:02d}'.format(ts // 3600, (ts % 3600) // 60, (ts % 3600) % 60) }}
        device_class: "timestamp"
