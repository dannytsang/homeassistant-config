# Created by Danny Tsang <danny@tsang.uk>
automation:
  # Solar
  - id: "1660317032653"
    alias: "Energy: Growatt Unavailable"
    description: ""
    trigger:
      - platform: state
        entity_id:
          - sensor.growatt_sph6000_last_data_update
        to: "unavailable"
        for:
          hours: 0
          minutes: 5
          seconds: 0
    condition:
      - condition: state
        entity_id: input_boolean.enable_growatt_update_check
        state: "on"
    action:
      - service: script.send_direct_notification
        data:
          message: Growatt is unavilable.
          title: ":sunny: :zap: :electric_plug: Solar"
          people:
            - person.danny
    mode: single
  - id: "1660403632839"
    alias: "Energy: Growatt Updating"
    description: "Needed to work around https://github.com/home-assistant/core/issues/76451"
    trigger:
      - platform: state
        entity_id: sensor.growatt_sph6000_last_data_update
        for:
          hours: 0
          minutes: 20
          seconds: 0
      - platform: time_pattern
        minutes: "55"
    condition:
      - condition: state
        entity_id: input_boolean.enable_growatt_update_check
        state: "on"
      - condition: or
        conditions:
          - condition: state
            entity_id: sensor.growatt_sph6000_last_data_update
            state: "unavailable"
          # https://community.home-assistant.io/t/how-to-calculate-subtract-two-date-time-from-eachother/8197/14?u=tuxinator94
          - condition: template
            value_template: >-
              "{% set duration = as_timestamp(now()) - ((as_timestamp(states('sensor.growatt_sph6000_last_data_update')))|float(0)) %}
              {{duration|int(0) >= (states('input_number.growatt_max_last_updated')|float(0) * 60) }}"
    action:
      - parallel:
          - service: script.send_to_home_log
            data:
              message: "Growatt integration has not been updated for over
                {% set duration = as_timestamp(now()) -
                ((as_timestamp(states('sensor.growatt_sph6000_last_data_update')))|float(0)) %}
                {{ states('input_number.growatt_max_last_updated')|int(0) }} (
                {{ (duration / 60)|round(0, 'floor') }})
                {{ state_attr('input_number.growatt_max_last_updated', 'unit_of_measurement') }}.
                Reloading integration."
              title: ":sunny: :zap: :electric_plug: Solar"
              log_level: "Normal"
          # https://community.home-assistant.io/t/can-i-write-an-automation-to-reload-restart-an-integration/301020/35?u=tuxinator94
          - service: homeassistant.reload_config_entry
            data: {}
            target:
              entity_id:
                - sensor.growatt_sph6000_last_data_update
    mode: single
  # Notifications
  - id: "1661076689668"
    alias: "Energy: Battery Charged And Forecasted Excess Solar"
    description: ""
    trigger:
      - platform: numeric_state
        entity_id: sensor.growatt_battery_1_state_of_charge
        above: input_number.battery_charged_notification
    condition:
      - condition: or
        conditions:
          - condition: numeric_state
            entity_id: sensor.total_solar_forecast_estimated_energy_production_this_hour
            above: "0"
          - condition: numeric_state
            entity_id: sensor.total_solar_forecast_estimated_energy_production_next_hour
            above: "0"
    action:
      - service: script.energy_notify_excess_solar
        data: {}
    mode: single
  - id: "1660858653319"
    alias: "Energy: Solar Forecast Tomorrow"
    description: ""
    trigger:
      - platform: time
        at: "21:00:00"
    condition: []
    action:
      - alias: update forecast
        service: script.update_solcast
        data: {}
      - parallel:
          - if:
              - condition: numeric_state
                entity_id: sensor.total_solar_forecast_estimated_energy_production_tomorrow
                below: input_number.solar_generation_minimum_threshold
            then:
              - service: script.send_to_home_log
                data:
                  message: >-
                    Forecast generation is expected to be low
                    ({{ states('sensor.total_solar_forecast_estimated_energy_production_tomorrow') }}<
                    {{ states('input_number.solar_generation_minimum_threshold', with_unit=True) }}).

                    Incrementing counter from {{ states('input_number.consecutive_forecast_days_below_solar_generation') }} to
                    {{ (states('input_number.consecutive_forecast_days_below_solar_generation')|int(0)) + 1 }}
                    {{ state_attr('input_number.consecutive_forecast_days_below_solar_generation', 'unit_of_measurement') }}.
                  title: ":sunny: :zap: Solar"
                  log_level: "Normal"
              - service: input_number.increment
                data: {}
                target:
                  entity_id: input_number.consecutive_forecast_days_below_solar_generation
            else:
              - service: input_number.set_value
                data:
                  value: 0
                target:
                  entity_id: input_number.consecutive_forecast_days_below_solar_generation
          - service: script.energy_notify_tomorrows_solar_forecast
            data: {}
          - service: input_number.set_value
            data:
              value: "{{ states('sensor.total_solar_forecast_estimated_energy_production_tomorrow')|float(0) }}"
            target:
              entity_id: input_number.total_solar_forecast_estimated_energy_production_tomorrow
    mode: single
  - id: "1664743590782"
    alias: "Energy: Battery Charged Today"
    description: ""
    trigger:
      - platform: numeric_state
        entity_id: sensor.growatt_battery_1_state_of_charge
        above: input_number.growatt_battery_charged_threshold
    condition:
      - condition: state
        entity_id: input_boolean.battery_charged_today
        state: "off"
    action:
      - service: script.send_to_home_log
        data:
          message: Battery charged today
          title: ":sunny: :zap: Solar"
          log_level: "Debug"
      - service: input_boolean.turn_on
        data: {}
        target:
          entity_id: input_boolean.battery_charged_today
      - if:
          - condition: numeric_state
            entity_id: input_number.consecutive_days_battery_not_charged
            above: 0
        then:
          - service: script.send_to_home_log
            data:
              message: Resetting days not fully charged.
              title: ":sunny: :zap: Solar"
              log_level: "Debug"
          - service: input_number.set_value
            data:
              value: 0
            target:
              entity_id: input_number.consecutive_days_battery_not_charged
    mode: single
  - id: "1664743700827"
    alias: "Energy: Reset Battery Charged Today"
    description: ""
    trigger:
      - platform: time
        at: "00:00:00"
    condition: []
    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: input_boolean.battery_charged_today
                state: "on"
            sequence:
              - parallel:
                  - service: script.send_to_home_log
                    data:
                      message: Resetting battery charged today.
                      title: ":sunny: :zap: Solar"
                      log_level: "Debug"
                  - service: input_boolean.turn_off
                    data: {}
                    target:
                      entity_id: input_boolean.battery_charged_today
          - conditions:
              - condition: state
                entity_id: input_boolean.battery_charged_today
                state: "off"
            sequence:
              - service: script.send_to_home_log
                data:
                  message: >-
                    Battery did not fully charge today
                    (> {{ states('input_number.growatt_battery_charged_threshold', with_unit=True) }}).
                    Adding a day to count
                    ({{ states('input_number.consecutive_days_battery_not_charged') }}).
                  title: ":sunny: :zap: Solar"
                  log_level: "Debug"
              - service: input_number.increment
                data: {}
                target:
                  entity_id: input_number.consecutive_days_battery_not_charged
    mode: single
  - id: "1663589154517"
    alias: "Energy: Solar Production exceed threshold"
    description: ""
    trigger:
      - platform: numeric_state
        entity_id: sensor.total_solar_forecast_estimated_energy_production_today
        above: input_number.solar_generation_minimum_threshold
    condition: []
    action:
      - service: script.send_to_home_log
        data:
          message: Production above threshold. Resetting Forecast
          title: ":sunny: :zap: Solar"
          log_level: "Debug"
    mode: single
  - id: "1664744505278"
    alias: "Energy: Consecutive Days Battery Not Charged"
    description: ""
    trigger:
      - platform: numeric_state
        entity_id: input_number.consecutive_days_battery_not_charged
        above: 6
    condition: []
    action:
      - service: script.send_direct_notification
        data:
          message:
            It has been {{ states('input_number.consecutive_days_battery_not_charged')
            }} days where the battery has not been charged fully.
          title: ":sunny: :zap: Solar"
          people:
            - person.danny
    mode: single
  - id: "1663588514009"
    alias: "Energy: Consecutive Low Solar Generation"
    description: ""
    trigger:
      - platform: numeric_state
        entity_id: input_number.consecutive_forecast_days_below_solar_generation
        above: 6
    condition: []
    action:
      - service: script.send_direct_notification
        data:
          message:
            It has been {{ states('input_number.consecutive_forecast_days_below_solar_generation')
            }} days with low solar generation.
          title: ":sunny: :zap: Solar"
          people:
            - person.danny
    mode: single
  - id: "1674508693884"
    alias: "Energy: Battery Charge Notification"
    description: Used for Demand Flexibility Service
    trigger:
      - platform: time
        at: "15:55:00"
    condition:
      - condition: template
        value_template: "{{ (states('sensor.growatt_battery_1_state_of_charge')|int(0)) >
        ((states('input_number.growatt_battery_discharge_stop_soc')|int(0)) + 1) }}"
    action:
      - service: script.send_direct_notification
        data:
          message: >-
            {{ states('sensor.growatt_battery_1_state_of_charge') }}%
            (That is {{ state_attr('sensor.battery_charge_remaining_hours', 'duration') }}) remaining.
          title: ":house_with_garden: :battery: House Battery"
          people:
            - person.danny
    mode: single
  - id: "1680444237958"
    alias: "Energy: Power Cut Notification"
    description: ""
    trigger:
      - platform: state
        entity_id:
          - sensor.growatt_load_consumption
        to: "0"
        for:
          hours: 0
          minutes: 1
          seconds: 0
    condition: []
    action:
      - service: script.send_direct_notification
        data:
          message:
            No electricty consumption detected for over a minute. Check for power
            cut.
          title: ":warning: :zap: :house_with_garden: House :warning:"
    mode: single
  # Solcast
  - id: "1691767286139"
    alias: "Solcast: Update Forecast"
    description: ""
    trigger:
      - platform: time
        at: "08:00:00"
    condition: []
    action:
      - service: solcast_solar.update_forecasts
        data: {}
    mode: single

conversation:
  intents:
    getBatteryLevel:
      - "How much battery is left"
      - "[What is the] battery level"
      - "[What is the] charge level"
    getBatteryRunTime:
      - "How long will the battery last"
      - "How long will the battery run for"
      - "[What is the] battery (run time | runtime)"
      - "When will the battery run out"
    getBatterySummary:
      - "Battery summary"
    getSolarForecastLeft:
      - "[How much] solar [generation is] left [today]"
      - "Remaining solar [generation] [forecast [today]"
    getSolarForecastToday:
      - "[What is the] solar forecast today"
    getSolarForecastTomorrow:
      - "[What is the] solar forecast"
    getSolarGeneratedToday:
      - "[How much] solar [has] generated [today|so far]"

intent_script:
  getBatteryLevel:
    speech:
      text: >-
        {{ states('sensor.growatt_battery_1_state_of_charge', with_unit=True) }}
  getBatteryRunTime:
    speech:
      text: >-
        {{ states('sensor.battery_charge_remaining_hours') }}
  getBatterySummary:
    speech:
      text: >-
        {{ states('sensor.growatt_battery_1_state_of_charge', with_unit=True) }}
        and will run out in {{ states('sensor.battery_charge_remaining_hours') }}
  getSolarForecastLeft:
    speech:
      text: >-
        {{ (states('sensor.total_solar_forecast_estimated_energy_production_today')|float(0) - states('sensor.growatt_solar_generated_energy_today')|float(0))|round(2) }}
        {{ state_attr('sensor.growatt_solar_generated_energy_today', 'unit_of_measurement') }} remaining.
  getSolarForecastToday:
    speech:
      text: >-
        Today's forecast is
        {{ states('sensor.total_solar_forecast_estimated_energy_production_today', with_unit=True) }}.
  getSolarForecastTomorrow:
    speech:
      text: >-
        Tomorrow's forecast is
        {{ states('sensor.total_solar_forecast_estimated_energy_production_tomorrow', with_unit=True) }}.
  getSolarGeneratedToday:
    speech:
      text: >-
        {{ states('sensor.growatt_solar_generated_energy_today', with_unit=True) }}

mqtt:
  sensor:
    # Example from: https://github.com/johanmeijer/grott/blob/master/examples/Home%20Assistent/sensors_growatt_eng.yaml
    # Reference MQTT keys: https://github.com/johanmeijer/grott/wiki/MQTT
    - state_topic: energy/growatt
      value_template: "{{ value_json['device'] }}"
      unique_id: growatt_serial
      name: Growatt - Serial number
      icon: mdi:select-inverse
    - state_topic: energy/growatt
      value_template: "{{ as_timestamp(strptime(value_json['time'], '%Y-%m-%dT%H:%M:%S')) | timestamp_custom('%Y-%m-%d') }}"
      unique_id: growatt_date
      device_class: date
      name: Growatt - Date
      icon: mdi:calendar
    - state_topic: energy/growatt
      value_template: "{{ as_timestamp(strptime(value_json['time'], '%Y-%m-%dT%H:%M:%S')) | timestamp_custom('%H:%M:%S') }}"
      unique_id: growatt_time
      name: Growatt - Time
      icon: mdi:clock-digital
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['totworktime'] | int / 2 }}"
      unique_id: growatt_working_time
      unit_of_measurement: "s"
      name: Growatt - Working Time
    - state_topic: energy/growatt
      value_template: >
        {% if (value_json['values']['pvstatus'] | int == 0) %}
          Waiting
        {% elif (value_json['values']['pvstatus'] | int == 1) %}
          Normal
        {% elif (value_json['values']['pvstatus'] | int == 2) %}
          Fault
        {% else %}
          Unknown ({{ value_json['values']['pvstatus'] }})
        {% endif %}
      unique_id: growatt_status
      name: Growatt - State
      icon: mdi:power-settings
    - state_topic: energy/growatt
      value_template: >
        {% if (value_json['values']['uwsysworkmode'] | int == 0) %}
          Waiting
        {% elif (value_json['values']['uwsysworkmode'] | int == 1) %}
          Self-test
        {% elif (value_json['values']['uwsysworkmode'] | int == 3) %}
          Fault
        {% elif (value_json['values']['uwsysworkmode'] | int == 4) %}
          Flash
        {% elif (value_json['values']['uwsysworkmode'] | int == 5) %}
          Normal
        {% elif (value_json['values']['uwsysworkmode'] | int == 6) %}
          Battery Online
        {% elif (value_json['values']['uwsysworkmode'] | int == 7) %}
          PV Offline
        {% elif (value_json['values']['uwsysworkmode'] | int == 6) %}
          Battery Offline
        {% else %}
          Unknown ({{ value_json['values']['uwsysworkmode'] }})
        {% endif %}
      unique_id: growatt_system_work_mode
      name: Growatt - System Work Mode
      icon: mdi:power-settings
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['systemfaultword0'] }}"
      unique_id: growatt_system_fault_0
      name: Growatt - System Fault 0
      icon: mdi:flash-alert
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['systemfaultword1'] }}"
      unique_id: growatt_system_fault_1
      name: Growatt - System Fault 1
      icon: mdi:flash-alert
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['systemfaultword2'] }}"
      unique_id: growatt_system_fault_2
      name: Growatt - System Fault 2
      icon: mdi:flash-alert
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['systemfaultword3'] }}"
      unique_id: growatt_system_fault_3
      name: Growatt - System Fault 3
      icon: mdi:flash-alert
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['systemfaultword4'] }}"
      unique_id: growatt_system_fault_4
      name: Growatt - System Fault 4
      icon: mdi:flash-alert
    - state_topic: energy/growatt
      value_template: "{{ value_json['buffered'] }}"
      unique_id: growatt_buffered
      name: Growatt - Buffered
      icon: mdi:cached

    # Usage
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['plocaloadr'] | float / 10000 }}"
      unique_id: growatt_load
      device_class: power
      unit_of_measurement: "kW"
      name: Growatt - Load Consumption
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['elocalload_tod'] | float / 10 }}"
      unique_id: growatt_load_today
      device_class: energy
      unit_of_measurement: "kWh"
      name: Growatt - Load Consumption Today
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['elocalload_tot'] | float / 10 }}"
      unique_id: growatt_load_lifetime
      device_class: energy
      unit_of_measurement: "kWh"
      state_class: total
      name: Growatt - Load Consumption Lifetime

    # Export
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['pactogridr'] | float / 10000 }}"
      unique_id: growatt_export
      device_class: power
      unit_of_measurement: "kW"
      name: Growatt - Export To Grid
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['etogrid_tod'] | float / 10 }}"
      unique_id: growatt_export_today
      device_class: energy
      unit_of_measurement: "kWh"
      name: Growatt - Export To Grid Today
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['etogrid_tot'] | float / 10 }}"
      unique_id: growatt_export_lifetime
      device_class: energy
      unit_of_measurement: "kWh"
      state_class: total
      name: Growatt - Export To Grid Lifetime

    # String 1 (Back)
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['pv1watt'] | float / 10000 }}"
      unique_id: growatt_string1_watt
      device_class: power
      unit_of_measurement: "kW"
      name: Growatt - String 1 (Watt)
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['pv1voltage'] | float / 10 }}"
      unique_id: growatt_string1_voltage
      device_class: voltage
      unit_of_measurement: "V"
      name: Growatt - String 1 (Voltage)
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['pv1current'] | float / 10 }}"
      unique_id: growatt_string1_current
      device_class: current
      unit_of_measurement: "A"
      name: Growatt - String 1 (Current)
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['epv1today'] | float / 10 }}"
      unique_id: growatt_string1_generated_energy_today
      device_class: energy
      unit_of_measurement: "kWh"
      name: Growatt - String 1 Generated Today
      icon: mdi:solar-power
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['epv1total'] | float / 10 }}"
      unique_id: growatt_string1_generated_energy_total
      device_class: energy
      unit_of_measurement: "kWh"
      name: Growatt - String 1 Generated energy (Total)
      icon: mdi:solar-power

    # String 2 (Front)
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['pv2watt'] | float / 10000 }}"
      unique_id: growatt_string2_watt
      device_class: power
      unit_of_measurement: "kW"
      name: Growatt - String 2 (Watt)
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['pv2voltage'] | float / 10 }}"
      unique_id: growatt_string2_voltage
      device_class: voltage
      unit_of_measurement: "V"
      name: Growatt - String 2 (Voltage)
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['pv2current'] | float / 10 }}"
      unique_id: growatt_string2_current
      device_class: current
      unit_of_measurement: "A"
      name: Growatt - String 2 (Current)
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['epv2today'] | float / 10 }}"
      unique_id: growatt_string2_generated_energy_today
      device_class: energy
      unit_of_measurement: "kWh"
      name: Growatt - String 2 Generated Today
      icon: mdi:solar-power
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['epv2total'] | float / 10 }}"
      unique_id: growatt_string2_generated_energy_total
      device_class: energy
      unit_of_measurement: "kWh"
      name: Growatt - String 2 Generated energy (Total)
      icon: mdi:solar-power

    # Solar Total
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['epvtotal'] | float / 10 }}"
      unique_id: growatt_total_solar_generated_energy_lifetime
      device_class: energy
      unit_of_measurement: "kWh"
      state_class: total
      name: Growatt - Solar Generated Energy Lifetime
      icon: mdi:solar-power
      # Solar + Battery
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['pvenergytoday'] | float / 10 }}"
      unique_id: growatt_self_generated_energy_today
      device_class: energy
      unit_of_measurement: "kWh"
      name: Growatt - Self Generated Energy Today
      icon: mdi:solar-power
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['pvpowerin'] | float / 10000 }}"
      unique_id: growatt_input_power
      device_class: power
      unit_of_measurement: "kW"
      name: Growatt - Input watt
      icon: mdi:solar-power
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['pvpowerout'] | float / 10000 }}"
      unique_id: growatt_output_power
      device_class: power
      unit_of_measurement: "kW"
      name: Growatt - Solar Generation
      icon: mdi:solar-power

    # Grid
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['pactouserr'] | float / 10000 }}"
      unique_id: growatt_grid_import
      device_class: power
      unit_of_measurement: "kW"
      name: Growatt - Grid Import
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['pvgridpower'] | float / 10000 }}"
      unique_id: growatt_grid_phase_voltage_watts
      device_class: power
      unit_of_measurement: "kW"
      name: Growatt - Grid Phase Power
      icon: mdi:flash
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['pvgridvoltage'] | float / 10 }}"
      unique_id: growatt_grid_phase_voltage
      device_class: voltage
      unit_of_measurement: "V"
      name: Growatt - Grid Phase Power
      icon: mdi:flash
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['pvgridcurrent'] | float }}"
      unique_id: growatt_grid_phase_current
      device_class: current
      unit_of_measurement: "A"
      name: Growatt - Grid Phase Current
      icon: mdi:flash
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['pvfrequentie'] | float /100 }}"
      unique_id: growatt_grid_phase_frequency
      device_class: frequency
      unit_of_measurement: "Hz"
      name: Growatt - Grid Phase Frequency
      icon: mdi:waveform

    # Temperatures
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['pvtemperature'] | float / 10 }}"
      unique_id: growatt_inverer_temperature
      device_class: temperature
      unit_of_measurement: "°C"
      name: Growatt - Inverter temperature
    # Inside inverter temperature
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['pvipmtemperature'] | float / 10 }}"
      unique_id: growatt_ipm_temperature
      device_class: temperature
      unit_of_measurement: "°C"
      name: Growatt - IPM temperature

    # Battery 1
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['SOC'] | int }}"
      unique_id: growatt_battery_soc
      device_class: battery
      unit_of_measurement: "%"
      name: Growatt - Battery 1 State of Charge
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['p1charge1'] | float / 10000 }}"
      unique_id: growatt_battery_charge_rate
      device_class: power
      unit_of_measurement: "kW"
      name: Growatt - Battery 1 Charge Rate
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['eharge1_tod'] | float / 10 }}"
      unique_id: growatt_battery_charged_today
      device_class: energy
      unit_of_measurement: "kWh"
      name: Growatt - Battery 1 Charged Today
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['eharge1_tot'] | float / 10 }}"
      unique_id: growatt_battery_charged_lifetime
      device_class: energy
      unit_of_measurement: "kWh"
      state_class: total
      name: Growatt - Battery 1 Charged Lifetime
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['pdischarge1'] | float / 10000 }}"
      unique_id: growatt_battery_discharge_rate
      device_class: power
      state_class: total
      unit_of_measurement: "kW"
      name: Growatt - Battery 1 Discharged Rate
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['edischarge1_tod'] | float / 10 }}"
      unique_id: growatt_battery_discharged_today
      device_class: energy
      unit_of_measurement: "kWh"
      name: Growatt - Battery 1 Discharged Today
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['edischarge1_tot'] | float / 10 }}"
      unique_id: growatt_battery_discharged_lifetime
      device_class: energy
      unit_of_measurement: "kWh"
      state_class: total
      name: Growatt - Battery 1 Discharged Lifetime
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['vbat'] | float / 10 }}"
      unique_id: growatt_battery_voltage
      device_class: voltage
      unit_of_measurement: "V"
      name: Growatt - Battery 1 Voltage
    # Miscellaneous
    - state_topic: energy/growatt
      value_template: "{{ value_json['values']['spbusvolt'] | float / 1000 }}"
      unique_id: growatt_bus_voltage
      device_class: voltage
      unit_of_measurement: "V"
      name: Growatt - Bus Voltage

script:
  energy_notify_excess_solar:
    alias: Energy Notify Excess Solar
    variables:
      people_home: "{% set people = namespace(home=[]) %}
        {% for p in state_attr('group.adult_people', 'entity_id')|default([]) %}
        {% if states(p) == 'home' %}
        {% set people.home = people.home + [p] %}
        {% endif %}
        {% endfor %}
        {{ people.home }}"
      message: >-
        :battery: Battery charged to
        ({{ states('sensor.growatt_battery_1_state_of_charge', with_unit=True) }}).
        {% if ((states('sensor.growatt_battery_1_charge_rate')|float(0)) > 0) and
        state_attr('sensor.time_to_charge_battery', 'time_remaining') is not none %}
        It will take around {{ state_attr('sensor.time_to_charge_battery', 'time_remaining') }}
        to charge the battery.
        {% endif %}
        It's estimated to produce
        {{ states('sensor.total_solar_forecast_estimated_energy_production_next_hour', with_unit=True) }}
        in the next hour.
        {% if (states('sensor.growatt_solar_generated_energy_today')|float(0))|round(2) < (states('sensor.total_solar_forecast_estimated_energy_production_today')|float(0)) %}


        There's approximately
        {{ ((states('sensor.total_solar_forecast_estimated_energy_production_today')|float(0)) -
        (states('sensor.growatt_solar_generated_energy_today')|float(0)))|round(2) }}
        (out of {{ (states('sensor.total_solar_forecast_estimated_energy_production_today')|float(0))|round(2) }})
        {{ state_attr('sensor.total_solar_forecast_estimated_energy_production_today', 'unit_of_measurement') }}
        to be produced to the end of the day ({{ as_timestamp(state_attr('sun.sun','next_setting')) | timestamp_custom('%H:%M') }}).
        {% endif %}
      title: ":sunny: :zap: Solar"
    sequence:
      - if:
          - condition: template
            value_template: "{{ (people_home|default([]))|length > 0 }}"
        then:
          - service: script.send_direct_notification
            data:
              message: "{{ message }}"
              title: ":sunny: :zap: :electric_plug: Solar"
              people: "{{ people_home }}"
        else:
          - service: script.send_to_home_log
            data:
              message: "{{ message }}"
              title: ":sunny: :zap: :electric_plug: Solar"
              log_level: "Normal"
    mode: single
    icon: mdi:solar-power
  energy_notify_tomorrows_solar_forecast:
    alias: Energy Notify Tommorow's Solar Forecast
    variables:
      estimate_charge_percentage: >-
        {%- from 'charge_battery_amount.jinja' import calculate_charge_battery_amount -%}
        {{ calculate_charge_battery_amount(states('sensor.total_solar_forecast_estimated_energy_production_tomorrow')|float(0)) }}
      estimate_charge_kw: >-
        {{ (states('input_number.solar_battery_size')|float(0)
        *(1-(states('input_number.growatt_battery_discharge_stop_soc')|float(0)/100)))
        *(estimate_charge_percentage|float(0)/100) }}
      estimate_charge_hours: >-
        {{ (states('input_number.solar_battery_size')|float(0)
        *(1-(states('input_number.growatt_battery_discharge_stop_soc')|float(0)/100)))
        *(estimate_charge_percentage|float(0)/100)
        / states('input_number.solar_battery_max_charge_rate')|float(0) }}
    sequence:
      - service: script.send_direct_notification
        data:
          message: >-
            {%- from 'get_solar_forecast.jinja' import get_first_solar_generation, get_last_solar_generation -%}
            {%- from 'charge_battery_amount.jinja' import calculate_charge_battery_amount -%}
            {%- from 'get_cheapest_electricity_rates.jinja' import get_cheapest_electricity_rates -%}
            Generation forecast for tomorrow ({{ (as_timestamp(now()) - (24*3600)) | timestamp_custom('%Y-%m-%d', True) }})
            will be
            {{ states('sensor.total_solar_forecast_estimated_energy_production_tomorrow', with_unit=True) }}
            and will start at {{ as_timestamp(get_first_solar_generation('sensor.solcast_pv_forecast_forecast_tomorrow', 'detailedForecast', 'period_start', 'pv_estimate')|replace(' ', 'T'))|timestamp_custom('%H:%M:%S') }}.
            The first self sustaining generation will occur at
            {{ as_timestamp(get_first_solar_generation('sensor.solcast_pv_forecast_forecast_tomorrow', 'detailedForecast', 'period_start', 'pv_estimate', 0.7)|replace(' ', 'T'))|timestamp_custom('%H:%M:%S') }}
            ({{ get_first_solar_generation('sensor.solcast_pv_forecast_forecast_tomorrow', 'detailedForecast', 'pv_estimate', 'pv_estimate', 0.7)|round(2) }} kWh).


            The last self sustaining generation of the day will be at
            {{ as_timestamp(get_last_solar_generation('sensor.solcast_pv_forecast_forecast_tomorrow', 'detailedForecast', 'period_start', 'pv_estimate', 0.7)|replace(' ', 'T'))|timestamp_custom('%H:%M:%S') }}
            ({{ get_last_solar_generation('sensor.solcast_pv_forecast_forecast_tomorrow', 'detailedForecast', 'pv_estimate', 'pv_estimate', 0.7)|round(2) }} kWh) finishing at
            {{ as_timestamp(get_last_solar_generation('sensor.solcast_pv_forecast_forecast_tomorrow', 'detailedForecast', 'period_start', 'pv_estimate')|replace(' ', 'T'))|timestamp_custom('%H:%M:%S') }}.

            {% if estimate_charge_percentage != 23 %}
            Charge :house_with_garden::battery: battery to {{ estimate_charge_percentage }}% to {{ estimate_charge_kw }}kWh.
            Charge time required: {{ estimate_charge_hours|round(2, 'ceil') }}kWh. {{ estimate_charge_hours|round(0, 'ceil') }} charging slot(s) is required.
            {%- endif -%}
          title: ":sunny: :zap: Solar"
          people:
            - person.danny
  remaining_solar_forecast_today:
    variables:
      remaining: >-
        {
          'value':{{ (states('sensor.total_solar_forecast_estimated_energy_production_today')|float(0) - states('sensor.growatt_solar_generated_energy_today')|float(0))|round(2) }},
          'unit_of_measurement': '{{ state_attr('sensor.growatt_solar_generated_energy_today', 'unit_of_measurement') }}'
        }
    sequence:
      - stop: End
        response_variable: remaining
  update_solcast:
    alias: Update Solcast
    sequence:
      - if:
          - condition: numeric_state
            entity_id: sensor.solcast_pv_forecast_api_used
            below: sensor.solcast_pv_forecast_api_limit
        then:
          - parallel:
              - service: script.send_to_home_log
                data:
                  message: "Updating Solcast forecast."
                  title: ":sunny: :zap: :electric_plug: Solcast"
                  log_level: "Debug"
              - service: solcast_solar.update_forecasts
                data: {}
        else:
          - service: script.send_to_home_log
            data:
              message: "Reached API limit."
              title: ":warning: :sunny: :zap: :electric_plug: Solcast :warning:"
              log_level: "Normal"

sensor:
  - platform: statistics
    name: "Home Electricity Power Daily Average Over An Hour"
    entity_id: sensor.growatt_load_consumption
    state_characteristic: mean
    max_age:
      hours: 1
  - platform: statistics
    name: "Home Electricity Power Daily Average Over A Day"
    entity_id: sensor.growatt_load_consumption
    state_characteristic: mean
    max_age:
      hours: 24
  - platform: statistics
    name: "Home Electricity Power Daily Average Over A Week"
    entity_id: sensor.growatt_load_consumption
    state_characteristic: mean
    max_age:
      days: 7

template:
  - trigger:
      - platform: state
        entity_id:
          - sensor.battery_charge_remaining
          - sensor.growatt_load_consumption
    sensor:
      - name: "Battery Run Time"
        unique_id: c5955655-eb91-4bd7-9f8f-afc4e4f0c58c
        state: "{{ now() + timedelta( seconds = (((states('sensor.battery_charge_remaining')|float(0)/100) / (states('sensor.growatt_load_consumption')|replace('0','1')|float(1))) * 60 * 60)|round(0)) }}"
        icon: mdi:battery-clock-outline
        attributes:
          duration: >-
            {% set ts = (((states('sensor.battery_charge_remaining')|float(0)/100) / (states('sensor.growatt_load_consumption')|replace('0','1')|float(1))) * 60 * 60)|round(0) %}
            {{ '{:02d}:{:02d}:{:02d}'.format(ts // 3600, (ts % 3600) // 60, (ts % 3600) % 60) }}
        device_class: "timestamp"
  - trigger:
      - platform: state
        entity_id:
          - input_number.solar_battery_size
          - sensor.battery_charge_remaining
          - sensor.growatt_load_consumption
    sensor:
      - name: "Time To Charge Battery"
        unique_id: 78ea1413-0d1c-4b89-b109-c961fc30f84d
        state: "{{ now() + timedelta( seconds = (((((states('input_number.solar_battery_size')|float(0))-(states('sensor.battery_charge_remaining')|float(0)/100))/(states('sensor.growatt_battery_1_charge_rate')|float(1)))*60*60)|round(0)) if (states('sensor.growatt_battery_1_charge_rate')|float(0)) != 0 else 359999) }}"
        icon: mdi:battery-clock
        attributes:
          duration: >-
            {% set ts = (((((states('input_number.solar_battery_size')|float(0))-(states('sensor.battery_charge_remaining')|float(0)/100))/(states('sensor.growatt_battery_1_charge_rate')|float(1)))*60*60)|round(0)) if (states('sensor.growatt_battery_1_charge_rate')|float(0)) != 0 else 359999 %}
            {{ '{:02d}:{:02d}:{:02d}'.format(ts // 3600, (ts % 3600) // 60, (ts % 3600) % 60) }}
        device_class: "timestamp"
