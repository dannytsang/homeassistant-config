# Created by Danny Tsang <danny@tsang.uk>
automation:
  # Solar
  - id: "1660317032653"
    alias: "^Energy: Growatt Unavailable"
    description: ""
    trigger:
      - platform: state
        entity_id:
          - sensor.growatt_sph6000_last_data_update
        to: unavailable
        for:
          hours: 0
          minutes: 5
          seconds: 0
    condition:
      - condition: state
        entity_id: input_boolean.enable_growatt_update_check
        state: "on"
    action:
      - service: script.send_direct_notification
        data:
          message: Growatt is unavilable.
          title: ":sunny: :zap: :electric_plug: Solar"
          people:
            - person.danny
    mode: single
  - id: "1660403632839"
    alias: "^Energy: Growatt Updating"
    description: "Needed to work around https://github.com/home-assistant/core/issues/76451"
    trigger:
      - platform: state
        entity_id: sensor.growatt_sph6000_last_data_update
        for:
          hours: 0
          minutes: 20
          seconds: 0
      - platform: time_pattern
        minutes: "55"
    condition:
      - condition: state
        entity_id: input_boolean.enable_growatt_update_check
        state: "on"
      - condition: or
        conditions:
          - condition: state
            entity_id: sensor.growatt_sph6000_last_data_update
            state: "unavailable"
          # https://community.home-assistant.io/t/how-to-calculate-subtract-two-date-time-from-eachother/8197/14?u=tuxinator94
          - condition: template
            value_template: >-
              "{% set duration = as_timestamp(now()) - ((as_timestamp(states('sensor.growatt_sph6000_last_data_update')))|float(0)) %}
              {{duration|int(0) >= (states('input_number.growatt_max_last_updated')|float(0) * 60) }}"
    action:
      - parallel:
          - service: script.send_to_home_log
            data:
              message: "Growatt integration has not been updated for over
                {% set duration = as_timestamp(now()) -
                ((as_timestamp(states('sensor.growatt_sph6000_last_data_update')))|float(0)) %}
                {{ states('input_number.growatt_max_last_updated')|int(0) }} (
                {{ (duration / 60)|round(0, 'floor') }})
                {{ state_attr('input_number.growatt_max_last_updated', 'unit_of_measurement') }}.
                Reloading integration."
              title: ":sunny: :zap: :electric_plug: Solar"
          # https://community.home-assistant.io/t/can-i-write-an-automation-to-reload-restart-an-integration/301020/35?u=tuxinator94
          - service: homeassistant.reload_config_entry
            data: {}
            target:
              entity_id:
                - sensor.growatt_sph6000_last_data_update
    mode: single
  # Notifications
  - id: "1661076689668"
    alias: "^Energy: Battery Charged And Forecasted Excess Solar"
    description: ""
    trigger:
      - platform: numeric_state
        entity_id: sensor.growatt_sph6000_statement_of_charge
        above: "98"
    condition:
      - condition: or
        conditions:
          - condition: numeric_state
            entity_id: sensor.total_solar_forecast_estimated_energy_production_this_hour
            above: "0"
          - condition: numeric_state
            entity_id: sensor.total_solar_forecast_estimated_energy_production_next_hour
            above: "0"
    action:
      - service: script.energy_notify_excess_solar
        data: {}
    mode: single
  - id: "1660858653319"
    alias: "^Energy: Notify To Charge Battery Overnight"
    description: ""
    trigger:
      - platform: time
        at: "21:00:00"
    condition:
      - condition: numeric_state
        entity_id: sensor.energy_production_tomorrow
        below: input_number.solar_generation_minimum_threshold
    action:
      - service: script.send_direct_notification
        data:
          message:
            Charge battery tonight because solar production will be less than 6.1
            ({{ states('sensor.energy_production_tomorrow') }}) {{ state_attr('sensor.energy_production_tomorrow',
            'unit_of_measurement') }}
          title: Solar
          people:
            - person.danny
    mode: single

script:
  energy_notify_excess_solar:
    alias: Energy Notify Excess Solar
    variables:
      people_home: "{% set people = namespace(home=[]) %}
        {% for p in state_attr('group.adult_people', 'entity_id')|default([]) %}
        {% if states(p) == 'home' %}
        {% set people.home = people.home + [p] %}
        {% endif %}
        {% endfor %}
        {{ people.home }}"
    sequence:
      - service: script.send_direct_notification
        data:
          message: >-
            :battery: Battery charged
            ({{ states('sensor.growatt_sph6000_statement_of_charge')~
            state_attr('sensor.growatt_sph6000_statement_of_charge', 'unit_of_measurement') }})
            and estimated to produce
            {{ states('sensor.total_solar_forecast_estimated_energy_production_next_hour')~
            state_attr('sensor.total_solar_forecast_estimated_energy_production_next_hour', 'unit_of_measurement') }}
            in the next hour.


            There's approximately
            {{ (states('sensor.power_production_next_24hours')|float(0)/1000) }} kW
            to be produced to the end of the day ({{ as_timestamp(state_attr('sun.sun','next_setting')) | timestamp_custom('%H:%M') }}).
          title: ":sunny: :zap: :electric_plug: Solar"
          people: "{{ people_home }}"
    mode: single
    icon: mdi:solar-power

template:
  - sensor:
      - name: "Total Solar Forecast Estimated energy production - next hour"
        unique_id: 5203e039-773f-4aaf-9328-aa114cbaec9c
        state: "{{ states('sensor.energy_next_hour_2')|float(0) + states('sensor.energy_next_hour_2')|float(0) }}"
        unit_of_measurement: "kWh"
        device_class: "energy"
      - name: "Total Solar Forecast Estimated energy production - this hour"
        unique_id: 4d16252d-baf5-4f26-8e4f-4a2042d6a508
        state: "{{ states('sensor.energy_current_hour')|float(0) + states('sensor.energy_current_hour_2')|float(0) }}"
        unit_of_measurement: "kWh"
        device_class: "energy"
      - name: "Total Solar Forecast Estimated energy production - today"
        unique_id: aec02771-728e-4d83-828f-038e7031fae3
        state: "{{ states('sensor.energy_production_today')|float(0) + states('sensor.energy_production_today_2')|float(0) }}"
        unit_of_measurement: "kWh"
        device_class: "energy"
      - name: "Total Solar Forecast Estimated Energy Production - tomorrow"
        unique_id: faabd52e-ca7c-45ae-87f3-79c33ce94a3b
        state: "{{ states('sensor.energy_production_tomorrow')|float(0) + states('sensor.energy_production_tomorrow_2')|float(0) }}"
        unit_of_measurement: "kWh"
        device_class: "energy"
      - name: "Total Solar Forecast Estimated power production - now"
        unique_id: 86156911-5980-43bf-b8a9-1d6a7e4ad3cb
        state: "{{ states('sensor.power_production_now')|float(0) + states('sensor.power_production_now_2')|float(0) }}"
        unit_of_measurement: "kWh"
        device_class: "energy"
      - name: "Total Solar Forecast Estimated power production next 12 hours"
        unique_id: c366200e-74c2-49fb-a08a-b706a3120bf3
        state: "{{ states('sensor.power_production_next_12hours')|float(0) + states('sensor.power_production_next_12hours_2')|float(0) }}"
        unit_of_measurement: "kWh"
        device_class: "energy"
      - name: "Total Solar Forecast Estimated power production next 24 hours"
        unique_id: 327211fc-7224-454a-b8e6-cafa3c2cbafd
        state: "{{ states('sensor.power_production_next_24hours')|float(0) + states('sensor.power_production_next_24hours_2')|float(0) }}"
        unit_of_measurement: "kWh"
        device_class: "energy"
